<?php

/**
 *   Function for creating a taxonomy term for relative activity when a activity is created.
 */
function activities_term_save($terms, $activity) {
  // echo '<pre>'; print_r($terms); die();
	$activity_id = $activity->id;
	$firing_hook = $activity->field_activity_fired_hook['und'][0]['value'];
	$firing_explo = explode('|', $firing_hook);
	$firing_hook_name = $firing_explo[2];
	$firing_hook_webform_name = $firing_explo[0];

  // Getting the activity id value from term activity id field.
  $query = db_select('field_data_field_activity_id','activity_id')
  ->fields('activity_id',array('field_activity_id_value','entity_id'))
  ->condition('field_activity_id_value',$activity_id)
  ->execute()
  ->fetchAssoc();
  $field_activity_id = $query['field_activity_id_value'];
  $entity_field_id = $query['entity_id'];

  //dont create or update term for non review firing hooks
  if($firing_hook == 'user_insert' || $firing_hook == 'Poll answer submitted' || $firing_hook_webform_name == 'webform_submit') {
    return FALSE;
  }

  //Load taxonomy terms and get vid 
  $vocabulary = taxonomy_vocabulary_machine_name_load($terms);
  $activity_term_vid = $vocabulary->vid; 
  $activity_title = $activity->title;

  if(!isset($field_activity_id)) {
    $activity_term = new stdClass();
    $activity_term->name = $activity->title;
    $activity_term->vid = $activity_term_vid;
    $activity_term->parent = 0;
    taxonomy_term_save($activity_term);
    $tid_term = $activity_term->tid;
  }elseif (isset($field_activity_id)) {
    $tid_query = db_select('taxonomy_term_data','tax')
    ->fields('tax',array('tid'))
    ->condition('tid',$entity_field_id)
    ->execute()
    ->fetchAssoc();
    $tid_term = $tid_query['tid'];
  }

  $activity_term_load = taxonomy_term_load($tid_term);
  $write_url = str_replace('_', '-', $firing_hook_name);

  $activity_term_load->field_activity_id['und'][0]['value'] = $activity_id;
  $activity_term_load->field_read_review['und'][0]['title'] = $activity->title;
  $activity_term_load->field_write_review['und'][0]['url'] = 'node/add/$write_url';
  $activity_term_load->field_write_review['und'][0]['title'] = $activity->title;
  
  switch ($firing_hook_name) {
    case 'review_book':
      $activity_term_load->field_read_review['und'][0]['url'] = 'reviews';
      break;
    case 'progress_page' :
      $activity_term_load->field_read_review['und'][0]['url'] = 'activities-listing/' . $tid_term;
      $activity_term_load->field_write_review['und'][0]['url'] = 'node/add/review-activity/' . $tid_term;
      break;
    default:
      $activity_term_load->field_read_review['und'][0]['url'] = $write_url;
      break;
  }
  //Save term
  taxonomy_term_save($activity_term_load);	
}

/**
 * Function for deleting a taxonomy term for ralative activity when a activity is deleted.
 */
function activities_taxonomy_term_delete($terms, $activity) {
	$activity_title = $activity->title;
	$term_name = taxonomy_get_term_by_name($activity_title);
	$termid = reset($term_name);
	$term_id = $termid->tid;  
	taxonomy_term_delete($term_id);
}


/**
 * Adding taxonomy term for self reported activities
 */
function pl_add_taxonomy_self_reported_act_term($name, $type, $display = 0){

  $name = 'test self reported';
  $type = 'self_reported_activities';
  $display = 1;

  $term = new stdClass();
  $term_load = taxonomy_vocabulary_machine_name_load($type);
  if($term_load){
    $vid = $term_load->vid;
    $term->name = $name;
    $term->vid = $vid;
    $term->field_activity_id_sr['und'][0]['value'] = 31;
    $term->field_read_review_sr['und'][0]['url'] = 'qwerty';
    $term->field_read_review_sr['und'][0]['title'] = 'qqqq';
    $term->field_write_review_sr['und'][0]['url'] = 'aaaa';
    $term->field_write_review_sr['und'][0]['title'] = 'zzzzz';
    taxonomy_term_save($term);
    if ($display){
      drupal_set_message(t($term->name. ' term saved for '. $type. 'vocabulory'), 'status');
      return TRUE;
    }
  } else {
    if ($display){
      drupal_set_message(t($term->name. ' term could not be added for '. $type . 'vocabulory'), 'error');
      return FALSE;
    }
  }
}
