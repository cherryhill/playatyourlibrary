<?php
/**
 * @file
 * A module for progress page for teen program
 *
 * This module is for form alter, hook_menu,
 * custom blocks and program configuration settings
 */

/**
 * Implements hook_permission().
 */
function play_progress_teen_permission() {
  return array(
    'progress_page_access' => array(
      'title' => t('View Progress Page Access'),
      'description' => t('Access to view progress page'),
    ),
    'view_activity_record_for_patron' => array(
      'title' => t('Access activity record page'),
      'description' => t('Access activity record page'),
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function play_progress_teen_menu() {

  $items['progress'] = array(
    'page callback' => 'pl_progress_report_grid',
    'access arguments' => array('progress_page_access'), // permission for view progress page
    'type' => MENU_CALLBACK,
    'file' => 'inc/pl_progress_page.inc',
    'file path' => drupal_get_path('module', 'play_progress_teen'),
  );

  $items['activity_custom_node_insert'] = array(
    'page callback' => 'pl_activity_report_node_create',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'inc/pl_progress_page.inc',
    'file path' => drupal_get_path('module', 'play_progress_teen'),
  );

  $items['complete-activity-progress'] = array(
    'page callback' => 'pl_complete_activity_progress',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'inc/pl_progress_page.inc',
    'file path' => drupal_get_path('module', 'play_progress_teen'),
  );

  $items['progress-print'] = array(
    'page callback' => 'pl_progress_print_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'inc/pl_progress_page.inc',
    'file path' => drupal_get_path('module', 'play_progress_teen'),
  );

  $items['admin/config/system/progress_page_details'] = array(
    'title' => 'Progress Page Details',
    'description' => 'Platform Details for the program',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pl_configuration_progress'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/pl_configuration_page.inc',
  );
  
  $items['progress-grid-data'] = array(
    'title' => 'Record Activity for Patron',
    'page callback' => 'pl_progress_page_grid_data',
    // 'page arguments' => array('play_progress_teen_record_form'),
    // 'access arguments' => array('view_activity_record_for_patron'),
    'file' => 'inc/pl_progress_page.inc',
    'type' => MENU_CALLBACK,
  );

  $items['record-activity'] = array(
    'title' => 'Record Activity for Patron',
    'page callback' => 'show_activity_reward_forms',
    'page arguments' => array(1),
    'access arguments' => array('view_activity_record_for_patron'),
    'type' => MENU_CALLBACK,
  );

  $items['update-reward-pickup'] = array(
    'title' => 'Reward pick up',
    'page callback' => '_play_progress_calendar_update_rew_pickup',
    'access arguments' => array('access content'),
    // 'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

function show_activity_reward_forms() {
  $build = array();
  $build['form1'] = drupal_get_form('patron_activity_record_form');
  $build['form2'] = drupal_get_form('patron_reward_pickup_form');

  return drupal_render($build);
}

/**
 * Implements hook_block_info().
 */
function play_progress_teen_block_info() {

  $blocks = array();

  $blocks['progress_submit_block'] = array(
    'info' => t('Progress Submit Block'),
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function play_progress_teen_block_view($delta = '') {
  $block = array();
  
  switch($delta) {
    case 'progress_submit_block' :
      $block['content'] = drupal_get_form('pl_progress_record');
      break;
  }
  
  return $block;
}


/**
 * function callback for progress block to report activity
 */
function pl_progress_record($form,$form_state){

  $form['activity_progress_select'] = array(
    '#title' => t('I completed'),
    '#type' => 'select',
    '#options' => pl_activities_progress_block(),
    '#attributes' => array(
      'class' => array('activities_list_progress')
    ),
  );

  $form['date'] = array(
    '#type' => 'date_popup', 
    '#title' => t('on'),
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-1',
    '#datepicker_options' => array('maxDate' => '+0D'),
  );

  $form['pg_report'] = array(
    '#type' =>'markup',
    '#markup' => t("<input type = 'button' class = 'submit' value = 'submit' id = 'pg-report'>"),
  );

  return $form;
}

function pl_activities_progress_block() {

  $self = variable_get('activities_progress');

  $query = db_select('eck_activity','act');
  $query->fields('act', array('title','id'));
  $query->condition('id', $self);
  $result = $query->execute()->fetchAll();

  foreach ($result as $key => $value) {
    $options[$value->id] = $value->title;
  }

  return $options;
}

function pl_activities_view_select_option() {

  $query = db_select('eck_activity','act');
  $query->join('field_data_field_activity_fired_hook','hook', 'hook.entity_id = act.id');
  $query->fields('act', array('title','id'));
  $query->condition('hook.field_activity_fired_hook_value','progress_page');
  $result = $query->execute()->fetchAll();

  foreach ($result as $key => $value) {
    $options[$value->id] = $value->title;
  }

  return $options;
}

function pl_activities_view_select_option_nonSelf() {

  $query = db_select('eck_activity','act');
  $query->join('field_data_field_activity_fired_hook','hook', 'hook.entity_id = act.id');
  $query->fields('act', array('title','id'));
  $query->condition('hook.field_activity_fired_hook_value','progress_page','!=');
  $result = $query->execute()->fetchAll();

  foreach ($result as $key => $value) {
    $options[$value->id] = $value->title;
  }

  return $options;
}

/**
 * function callback for progress page
 */
function pl_progress_report_grid(){
  
  drupal_add_js( drupal_get_path('module', 'play_progress_teen') . '/js/play_progress_teen.js');
  return theme('progress-report');
}

/**
 * template for progress page
 */
function play_progress_teen_theme(){

  $templates = array(
   'progress-report' => array(
    'template' => 'templates/pl_progress_page',
  ));

  return $templates;
}

/**
 * function for saving taxonomy term on creation of activity.
 */
function pl_activities_term_save($term, $fire_hook, $activity) {

  // TRUE if the given table exists, otherwise FALSE.
  if(db_table_exists('field_data_field_activity_id') == TRUE) {
  
    $voc = taxonomy_vocabulary_machine_name_load($term);
    $activity_term_vid = $voc->vid;
    $activity_id = $activity->id;
    $activity_title = $activity->title;
    $activity_hotspot_value = $activity->field_hotspot_activity['und'][0]['value'];
    $activity_firehook = $activity->field_activity_fired_hook['und'][0]['value'];
    $activity_progress_page = $activity->field_show_on_progress_page['und'][0]['value'];



    $query = db_select('field_data_field_activity_id','activity_id')
      ->fields('activity_id',array('field_activity_id_value','entity_id'))
      ->condition('field_activity_id_value',$activity_id)
      ->execute()
      ->fetchAssoc();

    $field_activity_id = $query['field_activity_id_value'];
    $entity_field_id = $query['entity_id'];

    if(!isset($field_activity_id)){
      if($activity_firehook == $fire_hook){
        $hotspot_activity_term = new stdClass();
        $hotspot_activity_term->name = $activity_title;
        $hotspot_activity_term->vid = $activity_term_vid; // The ID of the parent vocabulary
        $hotspot_activity_term->parent = 0; // This tells taxonomy that this is a top-level term
        
        taxonomy_term_save($hotspot_activity_term);
        $tid_term = $hotspot_activity_term->tid;
        $activity_term = taxonomy_term_load($tid_term);

        $activity_term->field_activity_id['und'][0]['value'] = $activity_id; 
        $activity_term->field_hotspot_activity_type['und'][0]['value'] = $activity_hotspot_value ? $activity_hotspot_value:0;
        $activity_term->field_progress_page_term['und'][0]['value'] = $activity_progress_page ? $activity_progress_page:0;
        taxonomy_term_save($activity_term);
        }
    }else if(isset($field_activity_id)) {
      $hotspot_query = db_select('taxonomy_term_data','tax')
        ->fields('tax',array('tid'))
        ->condition('tid',$entity_field_id)
        ->execute()
        ->fetchAssoc();

      $tid = $hotspot_query['tid'];
      if($activity_firehook != $fire_hook){
        taxonomy_term_delete($tid);
      }else{
        $activity_term = taxonomy_term_load($tid);
        $activity_term->field_activity_id['und'][0]['value'] = $activity_id; 
        $activity_term->field_hotspot_activity_type['und'][0]['value'] = $activity_hotspot_value;
        $activity_term->field_progress_page_term['und'][0]['value'] = $activity_progress_page;
        $activity_term->name = $activity_title;
        taxonomy_term_save($activity_term);
      }
    }
  } else {
    return FALSE;
  }
}

/**
 * function for deleting taxonomy term on deletion of activity.
 */
function pl_activities_taxonomy_term_delete($term, $activity){

  $voc = taxonomy_vocabulary_machine_name_load($term);
  $activity_id = $activity->id;

  $query = db_select('field_data_field_activity_id','activity_id')
    ->fields('activity_id',array('field_activity_id_value','entity_id'))
    ->condition('field_activity_id_value',$activity_id)
    ->execute()
    ->fetchAssoc();

  $entity_field_id = $query['entity_id'];

  $hotspot_query = db_select('taxonomy_term_data','tax')
    ->fields('tax',array('tid'))
    ->condition('tid',$entity_field_id)
    ->execute()
    ->fetchAssoc();

  $tid = $hotspot_query['tid'];

  if(isset($tid)){
    taxonomy_term_delete($tid);
  }
}

/**
 * function for node creation on performing an activity to be shown on progress page
 */
function pl_activity_report_node_create($activity_id, $activity_date, $term_tid, $check_in_progress = 0, $current_user = 0) {

  $entity_info = entity_load('activity', array($activity_id));
  $activity_name = $entity_info[$activity_id]->title;
  $hotspot_activity_type = $entity_info[$activity_id]->field_hotspot_activity['und'][0]['value'];
  $activity_progress_status = $entity_info[$activity_id]->field_show_on_progress_page['und'][0]['value'];
  $_SESSION['progress_activity_id']= $activity_id;

  if($current_user == 0){
    global $user;
    $current_user = $user->uid;
  }

  // check activity 'show in progress' status
  if($check_in_progress) {
    if(!$activity_progress_status) {
      return FALSE;
    }
  }

  // if show in progress is one, node is created.
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node') // grab nodes
  ->entityCondition('bundle', 'activity_report') // filter by activity_report type
  ->propertyCondition('status', 1) // filter by published
  ->propertyCondition('uid', $current_user)  // filter by current user
  ->count(); // count

  $node = new stdClass(); // Creating a new node object
  $node->type = 'activity_report'; //Content type
  $node->language = LANGUAGE_NONE;
  node_object_prepare($node);
  $node->title = $activity_name;
  $node->status = 1;
  $node->uid = $current_user;
  $node->field_activity_id_report[LANGUAGE_NONE][0]['value'] = $activity_id;
  $node->field_hotspot_activity_report[LANGUAGE_NONE][0]['value'] = $hotspot_activity_type;
  $node->field_show_on_progress_report[LANGUAGE_NONE][0]['value'] = $activity_progress_status;
  $node->field_term_id[LANGUAGE_NONE][0]['value'] = $term_tid;
  $node->field_completion_date[LANGUAGE_NONE][0]['value'] = $activity_date;
  node_save($node);
  $created_nid = $node->nid;

  $_SESSION['teen_progress_report_nid'] = $created_nid;
}

/**
 * Getting of rafle count of the user
 */
function pl_raffle_count($uid){

  $query = db_select('eck_reward','raf')
    ->fields('raf',array('id'))
    ->condition('uid',$uid)
    ->condition('type','raffle_claim')
    ->execute();
  $num = $query->rowCount();

  return $num;
}

// function for statistical report according to stamps earned
function pl_user_node_stamps($uid, $stamps){

  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'activity_report')
    ->propertyCondition('uid', $uid)
    ->count()
    ->execute();

  if($entities <= $stamps){
    return FALSE;
  }else{
    return TRUE;
  }
}



/**
 * returns user name and user avatar
 */
function pl_user_avatar_progress_page($uid){

  if($uid == ''){
    return FALSE;
  }

  global $user;
  $user_pf = profile2_load_by_user($user->uid);
  $user_main = user_load($uid);

  $img_id = $user_pf['main']->field_user_avatar[LANGUAGE_NONE][0]['target_id'];
  $user_name = $user_main->name;

  $query = db_select('field_data_field_avatar_image', 't');
  $query->join('file_managed', 'n', 'n.fid = t.field_avatar_image_fid');
  $result = $query
    ->fields('n', array('uri'))
    ->condition('t.entity_id', $img_id)
    ->execute();

  $img_uri_query = $result->fetchObject();
  $img_uri = $img_uri_query->uri;
  $img_path = file_create_url($img_uri);

  $img = "<img src='$img_path'>";
  return $img.$user_name;
}


/**
*  Patron Activity Record form build is is for activity_record page.
*/

function patron_activity_record_form($form, &$form_state) {
  $qry = db_select('eck_activity', 'eck_a');
    $qry->join('field_data_field_activity_fired_hook', 'fdfafh', 'fdfafh.entity_id = eck_a.id');
    $qry->condition('fdfafh.field_activity_fired_hook_value', 'progress_page');
    $qry->fields('eck_a', array('title','id'));
    $resu = $qry->execute()->fetchAll();
    foreach ($resu as $value) {
      //$activity_id[] = $value->id; 
      $activity_title[$value->id] = $value->title; 
    }

  $form['username'] = array(
    '#title' => t('Username'),
    '#type' => 'textfield',
    '#default_value' => $_SESSION['username-record-activity'],
    '#autocomplete_path' => 'user/autocomplete',
    '#attributes' => array(
    'placeholder' => t('Username'),
    '#required'=> TRUE,
    ),
  );
          
  $form['html'] = array(
   '#type' => 'markup',
   '#markup' => '<div>Search for patrons here: <a href="patron-list" target="popup" onclick="window.open(&quot; patron-list &quot;, &quot; Patron List&quot; ,&quot; width=1000  height=400 &quot;)">Patron list</a></div>',
  );
  $form['activity'] = array(
    '#type' => 'select',
    '#options' => $activity_title,
  );
  $form['date'] = array(
    '#title' => t('On'),
    '#type' => 'date_popup',
    '#date_format' => 'F d, Y',
    '#date_year_range' => '0:+10',
    '#datepicker_options' => array('maxDate' => '+0D'),
    '#required' => TRUE,
    '#editable' =>'false',
    '#size' => 8,
  );
  // $form['to'] = array(
  //   '#title' => t('To'),
  //   '#type' => 'date_popup',
  //   '#date_format' => 'F d, Y',
  //   '#date_year_range' => '0:+10',
  //   '#datepicker_options' => array('maxDate' => '+0D'),
  //   '#required' => TRUE,
  //   '#editable' =>'false',
  //   '#size' => 8,
  //  );
  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
    '#attributes' => array('id'=>array('activity-submit')),
    // '#ajax' => array(
    //     'callback' => 'play_progress_teen_record_form_submit',
    //     'wrapper' => 'bingo-progress-main',
    //     'method' => 'replace',
    //     'effect' => 'fade',
    //   ),
  );

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'play_progress_teen') . '/js/record_activity.js',
  );

  return $form;
}

function patron_activity_record_form_submit($form, &$form_state) {
  $username = $form_state['values']['username'];

  $query = db_select('users', 'u');
  $query->condition('u.name', $username);
  $query->fields('u', array('uid'));
  $user_uid = $query->execute()->fetchField();

  $_SESSION['user_uid'] = $user_uid;
  $_SESSION['username-record-activity'] = $username;
 
  $activity_id = $form_state['values']['activity'];
  $activity_title = $form_state['complete form']['activity']['#options'][$activity_id];
  // $activity_title = 
  $from = strtotime($form_state['values']['date']);
  $status = play_library_program_create_activity_entry($activity_id , $user_uid, $from, $sticker_tid);
  if($status){
    drupal_set_message(t("Recorded $activity_title activity for ") . date('Y-m-d', $from) . t(" for user "). $username, 'status');
  }
  // drupal_set_message('You have entered the read on a day activity.');
}

function patron_reward_pickup_form($form, &$form_state) {
  //get patron name from session 

  $patron_name = user_load($_SESSION['user_uid'])->name;
  
  //get reward list

  $subqry = db_select('field_data_field_type_of_reward_raffle_priz', 'rew_type');
  $subqry->condition('rew_type.field_type_of_reward_raffle_priz_tid', 1);
  $subqry->fields('rew_type', array('entity_id'));
  $physical_rewids = $subqry->execute()->fetchAll();
  foreach ($physical_rewids as $key => $value) {
    $rew_ids[]= $value->entity_id;
  }
  // print_r($rew_ids);die();

  $qry = db_select('eck_reward', 'eck_r');
  //join all required tables
  $qry->LEFTJOIN('field_data_field_reward_claim_id', 'fdfrci', 'fdfrci.entity_id=eck_r.id');
  $qry->LEFTJOIN('field_data_field_staff_user', 'fdfsu', 'fdfsu.entity_id=eck_r.id');
  $qry->LEFTJOIN('field_data_field_staff_notes', 'fdfsn', 'fdfsn.entity_id=eck_r.id'); 
  $qry->LEFTJOIN('field_data_field_rf_pickup_date', 'fdfrpd', 'fdfrpd.entity_id=eck_r.id');
  $qry->LEFTJOIN('field_data_field_receieving_status', 'fdfrs', 'fdfrs.entity_id=eck_r.id');

  //Add required condition
  $qry->condition('eck_r.type', 'reward_claim');
  $qry->condition('eck_r.uid', $_SESSION['user_uid'] );
  $qry->condition('fdfrci.field_reward_claim_id_target_id', $rew_ids, 'IN');
  
  //Get required field values
  $qry->fields('eck_r', array('title','id', 'created'));
  $qry->fields('fdfsu', array('field_staff_user_value'));
  $qry->fields('fdfsn', array('field_staff_notes_value'));
  $qry->fields('fdfrpd', array('field_rf_pickup_date_value'));
  $qry->fields('fdfrs', array('field_receieving_status_value'));

  $Reward_set = $qry->execute()->fetchAll();
  // echo'<pre>';print_r($Reward_set);//die();
  // foreach ($resu as $value) {
  //   //$activity_id[] = $value->id; 
  //   $Reward_set[$value->id] = $value->id;
  //   $Reward_set[$value->id]['title'] = $value->title;
  //   $Reward_set[$value->id]['staff'] = $value->field_staff_user_value;
  //   $Reward_set[$value->id]['notes'] = $value->field_staff_notes_value;
  //   $Reward_set[$value->id]['pick_up_date'] = $value->field_rf_pickup_date_value;
  //   $Reward_set[$value->id]['rcv_status'] = $value->field_receieving_status_value;
  // }


  $form['title'] = array(
      '#type' => 'markup',
      '#markup' => '<div><h2>'.t('Record Prize Pickup for '). $patron_name .'</h2></div>',
      );

  $form['raffle-info'] = array(
      '#type' => 'markup',
      '#markup' => '<div><h5>'.t('If raffle prizes display below, raffle drawing details are available at <a href = "reward-winners">Reward Winners page</a>').'</h2></div>',
      );


  if(!empty($Reward_set)){
    $form['reward'] = array(
      '#prefix' => '<div id="people">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
      '#theme' => 'table',
      '#header' => array(t('Reward'), t('Staff'), t('Staff Notes'), t('Pickup Date'),t('Received'), t('Action')),
      '#rows' => array(),
    );
  }
  else{
    $form['raffle-info'] = array(
      '#type' => 'markup',
      '#markup' => '<div><h5>'.t('No Physical reward won by this patron'). '</h5></div>',
      );
  }

  foreach ($Reward_set as $value) {
    
      $reward_title = array(
      '#id' => 'reward-'.$value->id,
      '#type' => 'markup',
      '#markup' => $value->title,
        );

      $reward_staff = array(
      '#id' => 'staff-'.$value->id,
      '#type' => 'markup',
      '#markup' => $value->field_staff_user_value,
      );

    //Show input boxes only for non received rewards
    if(empty($value->field_staff_user_value)){
      $reward_staff_notes = array(
      '#id' => 'staff-notes-'.$value->id,
      '#type' => 'textfield',
      '#default_value' => $value->field_staff_notes_value,
      );

      $reward_pickup_date = array(
      '#type' => 'date_popup',
      '#date_format' => 'F d, Y',
      '#date_year_range' => '0:+10',
      '#datepicker_options' => array('maxDate' => '+0D'),
      '#required' => TRUE,
      '#editable' =>'false',
      '#size' => 8,
      '#id' => 'staff-date-'.$value->id,
      '#default_value' => date('m-d-Y', $value->field_rf_pickup_date_value),
      );

       if ($value->field_receieving_status_value){
        $reward_status = array(
          '#type' => 'markup',
          '#markup' => 'Yes',
        );
      } else{
        $reward_status = array(
          '#type' => 'markup',
          '#markup' => 'No',
        );
      }
    
      $reward_submit = array(
      '#id' => $value->id,
      '#value' => 'Submit',
      '#type' => 'button',
      '#attributes' => array('class'=> array('update-rew')));
      // '#attributes' => array('id'=>array('activity-submit')),
      // '#ajax' => array(
      //     'callback' => 'patron_activity_record_form_record',
      //     'wrapper' => 'bingo-progress-main',
      //     'method' => 'replace',
      //     'effect' => 'fade',
      //   ),
    }

    else{
      
      $reward_staff_notes = array(
        '#type' => 'markup',
        '#markup' => $value->field_staff_notes_value,
      );

      $reward_pickup_date = array(
        '#type' => 'markup',
        '#markup' => date('m-d-Y',strtotime($value->field_rf_pickup_date_value)),
      );

      if ($value->field_receieving_status_value){
        $reward_status = array(
          '#type' => 'markup',
          '#markup' => 'Yes',
        );
      } else{
        $reward_status = array(
          '#type' => 'markup',
          '#markup' => 'No',
        );
      }
      


    }
      
      $form['reward'][] = array(
        'title' => &$reward_title,
        'staff' => &$reward_staff,
        'notes' => &$reward_staff_notes,
        'pick up date' => &$reward_pickup_date,
        'status' => &$reward_status, 
        'submit' =>  &$reward_submit,
      );

      $form['reward']['#rows'][] = array(
        array('data' => &$reward_title),
        array('data' => &$reward_staff),
        array('data' => &$reward_staff_notes),
        array('data' => &$reward_pickup_date),
        array('data' => &$reward_status),
        array('data' => &$reward_submit),
      );
      unset($reward_title);
      unset($reward_staff);
      unset($reward_staff_notes);
      unset($reward_pickup_date);
      unset($reward_status);
      unset($reward_submit);  

  }
  // unset($SESSION['user_uid']);

  // $form['#attached']['js'] = array(
  //   drupal_get_path('module', 'play_progress_calendar') . '/js/record_activity.js',
  // );

  return $form;
}


//Function to update reward pickup details
function _play_progress_calendar_update_rew_pickup(){
  //Get username of user who is updating 
  global $user;
  $staff_name = $user->name;

  //Get field values
  $rew_id =  $_REQUEST['reward-id'];
  $staff_notes = $_REQUEST['staff-notes'];
  $rew_pickup_date = $_REQUEST['pickup-date'];
  $received_status = $_REQUEST['pickup-status'];

  $rewards = entity_load('reward', array($rew_id));
  $reward = reset($rewards);

  $lang = field_language('reward',$reward);
  foreach ($lang as $key => $value) {
    ${$key} = $value;
  }


  $reward->field_staff_user[$field_staff_user][0]['value'] = $staff_name;
  $reward->field_staff_notes[$field_staff_notes][0]['value'] = $staff_notes;
  $reward->field_rf_pickup_date[$field_rf_pickup_date][0]['value'] = date('Y-m-d h:i:s',strtotime($rew_pickup_date));
  $reward->field_receieving_status[$field_receieving_status][0]['value'] = 1;//$received_status;
  field_attach_update('reward', $reward);
  echo "success"; 
}
