<?php

/**
 * Implements hook_menu().
 */
function reports_menu(){
	$items = array();

  $items['activity-per-library-branch'] = array(
    'title' => t('Activity Report per Library Branch'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('readingPerBranch'),
    'access callback' => TRUE,
  );

  $items['activity-per-school'] = array(
    'title' => t('Activity Report per School'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('readingPerSchool'),
    'access callback' => TRUE,
  );

  $items['registrations-per-school'] = array(
    'title' => t('Registrations per School'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrationPerSchool'),
    'access callback' => TRUE,
  );

  $items['registrations-per-library-branch'] = array(
    'title' => t('Registrations per Library Branch'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('registrationPerBranch'),
    'access callback' => TRUE,
  );

  $items['registrations-test'] = array(
    'title' => t('Testing purposes'),
    'page callback' => 'all_activities',
    'access callback' => TRUE,
  );

  return $items;
}


/**
 * Access Callback for /projects page.
 */
function access_check() {
  global $user;
  if($user->uid)
    return TRUE;
  return FALSE;
}

/**
 * Function callback for activity report.
 * Based on library branch
 */
function readingPerBranch($form, $form_state) {

  $options = all_activities();
  $optionRole = user_roles();

  // print_r($options); die();

  $form['activity_branch'] = array(
    '#type' => 'select',
    '#title' => 'Activity',
    '#options' => $options,
    '#multiple' => TRUE,
    );

  $form['act_br_participation_count_from'] = array(
    '#type' => 'textfield',
    '#title' => 'Participation Count From',
    );

  $form['act_br_participation_count_to'] = array(
    '#type' => 'textfield',
    '#title' => 'Participation Count To',
    );

  $form['act_br_dob'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Age in Years of User'),
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['act_br_dob']['act_br_dob_from'] = array(
    '#title' => t('From'),
    '#type' => 'textfield',
  );

  $form['act_br_dob']['act_br_dob_to'] = array(
    '#title' => t('To'),
    '#type' => 'textfield',
  );

  $form['role_filter_br'] = array(
    '#type' => 'select',
    '#title' => 'Roles',
    '#options' => $optionRole,
  );

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );

  $form['act_br_output_table'] = array(
    '#markup' => $_SESSION['act_br_outputReg'],
  );

  unset($_SESSION['act_br_outputReg']);
  return $form;

}

/**
 * Submit function for activity report.
 * Per Library Branch
 */
function readingPerBranch_submit($form, &$form_state) {

  $activityIds = $form_state['values']['activity_branch'];

  foreach ($activityIds as $key => $value) {
    $activityFilter .= $form['activity_branch']['#options'][$value].', ';
  }

  if(!empty($activityFilter)) {
    $activityFiltr = 'Activity Filter: '.$activityFilter;
  }

  $countFrom = $form_state['values']['act_br_participation_count_from'];
  $countTo = $form_state['values']['act_br_participation_count_to'];

  if(!empty($countFrom) || !empty($countTo)){
    $countFilter = 'Participation Count from '.$countFrom.' to '.$countTo.', ';
  }

  $ageFrom = $form_state['values']['act_br_dob_from'];
  $ageTo = $form_state['values']['act_br_dob_to'];

  if (!empty($ageFrom) || !empty($ageTo)){
    $ageFilter = 'Age from '.$ageFrom.' to '.$ageTo.', ';
  }

  $roleFilter = $form_state['values']['role_filter_br'];
  $roleFltr = trim(strtolower($form['role_filter_br']['#options'][$roleFilter]));

  if(!empty($roleFltr)){
    $rolFilr = 'Role filter: '.$roleFltr;
  }

  //Check if any activity is selected
  if(!empty($activityIds)) {
    $sub_query = db_select('eck_activity', 'act');
    $sub_query->join('field_data_field_activity_entry_activity','actEntry','actEntry.entity_id = act.id');
    $sub_query->join('profile', 'pf', 'pf.uid = act.uid');

    //Check if age filter is added
    if(!empty($ageFrom) && !empty($ageTo)) {
      $sub_query->join('field_data_field_user_birthday','bday','bday.entity_id = pf.pid');
      $sub_query->fields('bday', array('field_user_birthday_value'));
    }

    $sub_query->fields('act', array('uid'));
    $sub_query->condition('actEntry.field_activity_entry_activity_target_id',$activityIds);
    $sub_query->groupBy('act.uid');
    $sub_query->addExpression('COUNT(actEntry.entity_id)', 'actCount');

    if(!empty($countFrom)) {
      $sub_query->having('actCount >= '.$countFrom);
    }

    $sub = $sub_query->execute()->fetchAll();

    foreach ($sub as $value) {
      $birthDate = $value->field_user_birthday_value;
      $diff = (date('Y') - date('Y',strtotime($birthDate)));
      //Filtering out users according to age.
      if (!empty($ageFrom) && !empty($ageTo)) {
        if (($ageFrom <= $diff) && ($diff <= $ageTo)){
          $actUsers[] = $value->uid;
        }
      } else {
        $actUsers[] = $value->uid;
      }
    }

    if(!empty($actUsers)){
      $query = db_select('users','u');
      $query->fields('u', array('uid'));
      $query->join('profile', 'pf', 'pf.uid = u.uid');
      $query->fields('pf', array('pid'));
      $query->join('field_data_field_library_branch','branch','branch.entity_id = pf.pid');

      $query->condition('u.uid', $actUsers, 'IN');

      if($roleFltr == 'group lead') {
        $query->join('users_roles', 'role', 'role.uid = pf.uid');
        $query->join('field_data_field_no_of_patrons_in_the_group','noPatron','noPatron.entity_id = pf.pid');
        $query->fields('role',array('rid','uid'));
        $query->fields('noPatron',array('field_no_of_patrons_in_the_group_value'));
        $query->condition('role.rid',$roleFilter);

        $query->fields('branch', array('field_library_branch_tid'));
        $query->groupBy('branch.field_library_branch_tid');
        $query->addExpression('sum(noPatron.field_no_of_patrons_in_the_group_value)', 'userCount');
        $result = $query->execute()->fetchAll();
      } else if($roleFltr == 'patron'){
        $query->join('users_roles', 'role', 'role.uid = pf.uid');
        $query->fields('role',array('rid','uid'));
        $query->condition('role.rid',$roleFilter);

        $query->fields('branch', array('field_library_branch_tid'));
        $query->groupBy('branch.field_library_branch_tid');
        $query->addExpression('COUNT(u.uid)', 'userCount');
        $result = $query->execute()->fetchAll();
      } else {
        $query->fields('branch', array('field_library_branch_tid'));
        $query->groupBy('branch.field_library_branch_tid');
        $query->addExpression('COUNT(u.uid)', 'userCount');
        $result = $query->execute()->fetchAll();
      }

      $rows = array();

      foreach ($result as $value) {

        $term = taxonomy_term_load($value->field_library_branch_tid);
        $name = $term->name;

        $rows[] = array(
          $name,
          $value->userCount,
        );
      }

      $header = array('Library Branch', 'Number of Users',$activityFiltr.$countFilter.$ageFilter.$rolFilr);
      $_SESSION['act_br_outputReg'] = theme('table', array('header' => $header, 'rows' => $rows));

    } else {
      $_SESSION['act_br_outputReg'] = 'No Result Found';
    }
  }
}

function all_activities() {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','activity');
  $query->entityCondition('bundle','activity');
  $result = $query->execute();

  if (isset($result['activity'])) {
    $activity_id = array_keys($result['activity']);
    $activity = entity_load('activity', $activity_id);
  }

  foreach ($activity as $act) {
    $options_activity[$act->id] = $act->title;
  }

  return $options_activity;
}

/**
 * Function callback for activity report.
 * Based on School
 */
function readingPerSchool($form, $form_state) {

  $options = all_activities();
  $optionRole = user_roles();

  $form['act_sc_activity'] = array(
    '#type' => 'select',
    '#title' => 'Activity',
    '#options' => $options,
    '#multiple' => TRUE,
    );

  $form['act_sc_participation_count_from'] = array(
    '#type' => 'textfield',
    '#title' => 'Participation Count From',
    );

  $form['act_sc_participation_count_to'] = array(
    '#type' => 'textfield',
    '#title' => 'Participation Count To',
    );

  $form['act_sc_dob'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Age in Years of User'),
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['act_sc_dob']['act_sc_dob_from'] = array(
    '#title' => t('From'),
    '#type' => 'textfield',
  );

  $form['act_sc_dob']['act_sc_dob_to'] = array(
    '#title' => t('To'),
    '#type' => 'textfield',
  );

  $form['role_filter_sc'] = array(
    '#type' => 'select',
    '#title' => 'Roles',
    '#options' => $optionRole,
  );

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );

  $form['output_table'] = array(
    '#markup' => $_SESSION['act_sc_outputReg'],
  );

  unset($_SESSION['act_sc_outputReg']);
  return $form;

}

/**
 * Submit function for activity report.
 * Per School
 */
function readingPerSchool_submit($form, &$form_state) {

  $activityIds = $form_state['values']['act_sc_activity'];

  foreach ($activityIds as $key => $value) {
    $activityFilter .= $form['act_sc_activity']['#options'][$value].', ';
  }

  if(!empty($activityFilter)) {
    $activityFiltr = 'Activity Filter: '.$activityFilter;
  }

  $countFrom = $form_state['values']['act_sc_participation_count_from'];
  $countTo = $form_state['values']['act_sc_participation_count_to'];

  if(!empty($countFrom) || !empty($countTo)){
    $countFilter = 'Participation Count from '.$countFrom.' to '.$countTo.', ';
  }

  $ageFrom = $form_state['values']['act_sc_dob_from'];
  $ageTo = $form_state['values']['act_sc_dob_to'];

  if (!empty($ageFrom) || !empty($ageTo)){
    $ageFilter = 'Age from '.$ageFrom.' to '.$ageTo.', ';
  }

  $roleFilter = $form_state['values']['role_filter_sc'];
  $roleFltr = $form['role_filter_sc']['#options'][$roleFilter];

  if(!empty($roleFltr)){
    $rolFilr = 'Role filter: '.$roleFltr;
  }

  //Check if any activity is selected
  if(!empty($activityIds)) {
    $sub_query = db_select('eck_activity', 'act');
    $sub_query->join('field_data_field_activity_entry_activity','actEntry','actEntry.entity_id = act.id');
    $sub_query->join('profile', 'pf', 'pf.uid = act.uid');

    //Check if age filter is added
    if(!empty($ageFrom) && !empty($ageTo)) {
      $sub_query->join('field_data_field_user_birthday','bday','bday.entity_id = pf.pid');
      $sub_query->fields('bday', array('field_user_birthday_value'));
    }

    $sub_query->fields('act', array('uid'));
    $sub_query->condition('actEntry.field_activity_entry_activity_target_id',$activityIds);
    $sub_query->groupBy('act.uid');
    $sub_query->addExpression('COUNT(actEntry.entity_id)', 'actCount');

    if(!empty($countFrom)) {
      $sub_query->having('actCount >= '.$countFrom);
    }

    if(!empty($countTo)) {
      $sub_query->having('actCount <= '.$countTo);
    }

    $sub = $sub_query->execute()->fetchAll();

    foreach ($sub as $value) {
      $birthDate = $value->field_user_birthday_value;
      $diff = (date('Y') - date('Y',strtotime($birthDate)));
      //Filtering out users according to age.
      if (!empty($ageFrom) && !empty($ageTo)) {
        if (($ageFrom <= $diff) && ($diff <= $ageTo)){
          $actUsers[] = $value->uid;
        }
      } else {
        $actUsers[] = $value->uid;
      }
    }

    if(!empty($actUsers)){
      $query = db_select('users','u');
      $query->fields('u', array('uid'));
      $query->join('profile', 'pf', 'pf.uid = u.uid');
      $query->fields('pf', array('pid'));
      $query->join('field_data_field_school','sch','sch.entity_id = pf.pid');

      $query->condition('u.uid', $actUsers, 'IN');

      if($roleFltr == 'group lead') {
        $query->join('users_roles', 'role', 'role.uid = pf.uid');
        $query->join('field_data_field_no_of_patron_in_the_group','noPatron','noPatron.entity_id = pf.pid');
        $query->fields('role',array('rid','uid'));
        $query->fields('noPatron',array('field_no_of_patrons_in_the_group_value'));
        $query->condition('role.rid',$roleFilter);

        $query->fields('sch', array('field_school_tid'));
        $query->groupBy('sch.field_school_tid');
        $query->addExpression('sum(noPatron.field_no_of_patrons_in_the_group_value)', 'userCount');
        $result = $query->execute()->fetchAll();
      } else if($roleFltr == 'patron'){
        $query->join('users_roles', 'role', 'role.uid = pf.uid');
        $query->fields('role',array('rid','uid'));
        $query->condition('role.rid',$roleFilter);

        $query->fields('sch', array('field_school_tid'));
        $query->groupBy('sch.field_school_tid');
        $query->addExpression('COUNT(u.uid)', 'userCount');
        $result = $query->execute()->fetchAll();
      } else {
        $query->fields('sch', array('field_school_tid'));
        $query->groupBy('sch.field_school_tid');
        $query->addExpression('COUNT(u.uid)', 'userCount');
        $result = $query->execute()->fetchAll();
      }



      $rows = array();

      foreach ($result as $value) {

        $term = taxonomy_term_load($value->field_school_tid);
        $name = $term->name;

        $rows[] = array(
          $name,
          $value->userCount,
        );
      }

      $header = array('School', 'Number of Users',$activityFiltr.$countFilter.$ageFilter.$rolFilr);
      $_SESSION['act_sc_outputReg'] = theme('table', array('header' => $header, 'rows' => $rows));
    } else {
      $_SESSION['act_sc_outputReg'] = 'No Result Found';
    }
  }
}


/**
 * Function callback for Registration report.
 * Based on library branch
 */
function registrationPerBranch($form, $form_state) {

  $form['reg_br_dob'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Age in Years of User'),
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['reg_br_dob']['reg_br_dob_from'] = array(
    '#title' => t('From'),
    '#type' => 'textfield',
  );

  $form['reg_br_dob']['reg_br_dob_to'] = array(
    '#title' => t('To'),
    '#type' => 'textfield',
  );

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );

  $form['output_table'] = array(
    '#markup' => $_SESSION['reg_br_outputReg'],
  );

  unset($_SESSION['reg_br_outputReg']);
  return $form;

}

function registrationPerBranch_submit($form, &$form_state) {

  $activityIds = $form_state['values']['activity'];

  if(!empty($activityIds)) {

    $query = db_select('users','u');
    $query->fields('u', array('uid'));
    $query->join('profile', 'pf', 'pf.uid = u.uid');
    $query->fields('pf', array('pid'));
    $query->join('field_data_field_library_branch','branch','branch.entity_id = pf.pid');
    $query->fields('branch', array('field_library_branch_tid'));
    $query->groupBy('branch.field_library_branch_tid');
    $query->addExpression('COUNT(u.uid)', 'userCount');
    $result = $query->execute()->fetchAll();

  }

  $rows = array();

  foreach ($result as $value) {

    $term = taxonomy_term_load($value->field_library_branch_tid);
    $name = $term->name;

    $rows[] = array(
      $name,
      $value->userCount,
    );
  }

  $header = array('Library Branch', 'Number of Users');
  $_SESSION['outputReg'] = theme('table', array('header' => $header, 'rows' => $rows));

}

/**
 * Function callback for generating report for number of reading days.
 * Based on library branch
 */
function registrationPerSchool($form, $form_state) {

  $options = all_activities();

  $form['activity'] = array(
    '#type' => 'select',
    '#title' => 'Activity',
    '#options' => $options,
    '#multiple' => TRUE,
    );

  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
  );

  $form['output_table'] = array(
    '#markup' => $_SESSION['outputReg'],
  );

  unset($_SESSION['outputReg']);
  return $form;

}

function registrationPerSchool_submit($form, &$form_state) {

  $activityIds = $form_state['values']['activity'];


  if(!empty($activityIds)) {

    $query = db_select('users','u');
    $query->fields('u', array('uid'));
    $query->join('profile', 'pf', 'pf.uid = u.uid');
    $query->fields('pf', array('pid'));
    $query->join('field_data_field_school','sch','sch.entity_id = pf.pid');
    $query->fields('sch', array('field_school_tid'));
    $query->groupBy('sch.field_school_tid');
    $query->addExpression('COUNT(u.uid)', 'userCount');
    $result = $query->execute()->fetchAll();

  }

  $rows = array();

  foreach ($result as $value) {

    $term = taxonomy_term_load($value->field_school_tid);
    $name = $term->name;

    $rows[] = array(
      $name,
      $value->userCount,
    );
  }

  $header = array('School', 'Number of Users');
  $_SESSION['outputReg'] = theme('table', array('header' => $header, 'rows' => $rows));

}
