<?php

/**
 * Implements hook_permission(). 
 */
function play_program_raffle_permission() {
  return array(
    'activity record access' => array(
      'title' => t('Administer activity record'),
      'description' => t('Perform administration tasks for activity record.'),
    ),
    'raffle_access_permission' => array(
      'title' => t('Administer Raffle access'),
      'description' => t('Perform administration tasks for raffle access.'),
    ),
  );
} 

/**
 * Implements hook_block(). . 
 */
function play_program_raffle_block_info() {
  $block = array();
  $blocks['staff-notes'] = array(
    'info' => t('Write Staff notes'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['progress-block-dashboard-page'] = array(
    'info' => t('Progress'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['user_progress_for_program'] = array(
    'info' => t('User Progress block for program'),
    'cache' => DRUPAL_NO_CACHE,
    );
  return $blocks;
}

function play_program_raffle_block_view($block_name = '') {
  switch ($block_name) {
    case 'staff-notes':
    $block['subject'] = '';
    $block['content'] = drupal_get_form('generate_staff_form');
    break;
    case 'progress-block-dashboard-page':
    $block['subject'] = '';
    $block['content'] = user_progress();
    break;
    case 'user_prize_block':
    $block['subject'] = '';
    $block['content'] = progress_user_block();
    break;
    case 'user_progress_for_program':
    $block['subject'] = '';
    $block['content'] = progress_user_block_program();
    break;                                
  }
  return $block;
}


/* Progress block of user on program page */
function progress_user_block_program() {
  global $user;
  $uid = $user->uid;
  $out = '';

   $quer = db_select('eck_activity', 'eck_a');
    $quer->LEFTJOIN ('field_data_field_activity_entry_activity' , 'fdfae' , 'fdfae.entity_id = eck_a.id');
    $quer->join('field_data_field_activity_fired_hook', 'hook', 'hook.entity_id = fdfae.field_activity_entry_activity_target_id');
    $quer->condition('eck_a.uid', $uid);
    $quer->condition('eck_a.type', 'activity_entry');
    $quer->condition('hook.field_activity_fired_hook_value', 'progress_page');
    $quer->fields('eck_a', array('title'));
    $resu = $quer->execute()->fetchAll();
    $day_count = count($resu);
    if($day_count == 1) {
      $out = t("<span class='msg-highlight'>Total day read: $day_count</span><br/>");
    }
    else {
      $out = t("<span class='msg-highlight'>Total days read: $day_count</span><br/>");
    } 

    return "<div>$out</div>";
}


function generate_staff_form($form, &$form_state) {
  $form['body'] = array(
    '#type' => 'textarea',
    '#title' => 'Staff Notes',
    
    );
  $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));  

  return $form;
}

function generate_staff_form_submit($form, &$form_state) {

  $staff_note = $form_state['complete form']['body']['#value'];
  $custom_uid = arg(1);
  $profile = profile2_create(array('type' => 'main', 'uid' => $custom_uid));
  $profile->field_staff_notes['und'][0]['value'] = $staff_note; 
  profile2_save($profile);
  drupal_set_message(t('Notes created.'));
}

/**
 * 
 */
function play_program_raffle_menu() {
  $items['raffle'] = array(
    'title' => 'Draw Raffle Winners',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ppr_raffle_entry_process'),
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['receive-reward/%'] = array(
    'title' => 'Giving Of Reward',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('claim_reward_status',1),
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_pro'] = array(
    'title' => 'Raffle Process',
    'page callback' => 'render_raffle_filter_form',
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_user_list'] = array(
    'title' => 'Raffle Process',
    'page callback' => 'raffle_user_list',
    'access arguments' => array('raffle_access_permission'),
    'type' => MENU_CALLBACK,
  );
  $items['raffle_table'] = array(
    'title' => 'Raffle Entry Detailed List',
    'page callback' => 'ppr_entery_detailed_list',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

function ppr_entery_detailed_list(){
  $query = db_select('eck_reward','eck');
  $query->join('field_data_field_raffle_claim_id','claim','eck.id = claim.entity_id');
  // $query->join('field_data_field_rf_receieved_reward','rf_win','eck.id = rf_win.entity_id');
  $query->fields('eck',array('id'));
  $query->condition('claim.field_raffle_claim_id_target_id', 386);
  // $query->condition('raffle_id',$raffle_id); 
  $query->condition('eck.uid',192);
  $sub_query = $query->execute()->fetchAll();

  // echo '<pre>'; print_r($sub_query); die();
}

function claim_reward_status($form, &$form_state, $arg) {

  $rid = $arg;

  $query = db_select('eck_reward','rew')
  ->fields('rew', array('title', 'id','uid'))
  ->condition('id', $rid,'=')
  ->execute()
  ->fetchAssoc();

  $reward_title = $query['title'];
  $reward_uid = $query['uid'];
  $reward_id = $query['id'];

  $queryUname = db_select('users','u')
  ->fields('u',array('name'))
  ->condition('uid',$reward_uid)
  ->execute()
  ->fetchAssoc();

  $queryStatus = db_select('field_data_field_receieving_status','status')
  ->fields('status',array('field_receieving_status_value'))
  ->condition('entity_id',$rid)
  ->execute()
  ->fetchAssoc();

  $queryNotes = db_select('field_data_field_staff_notes','notes')
  ->fields('notes',array('field_staff_notes_value'))
  ->condition('entity_id',$rid)
  ->execute()
  ->fetchAssoc();

  $queryDate = db_select('field_data_field_rf_pickup_date','rcDate')
  ->fields('rcDate',array('field_rf_pickup_date_value'))
  ->condition('entity_id',$rid)
  ->execute()
  ->fetchAssoc();

  $receievingStatus = $queryStatus['field_receieving_status_value'];
  $receievingNotes = $queryNotes['field_staff_notes_value'];
  $receievingDate = $queryDate['field_rf_pickup_date_value'];
  $receievingUser = $queryUname['name'];

  $form['reward_taken'] = array(
    '#title' => t($reward_title),
    '#type' => 'checkbox',
    '#default_value' => isset($receievingStatus) ? $receievingStatus : '0',
  );
  
  $form['username'] = array(
    '#type' => 'hidden',
    '#value' => $receievingUser,
  );

  $form['rid'] = array(
    '#type' => 'hidden',
    '#value' => $reward_id,
  );

  $form['title'] = array(
    '#type' => 'hidden',
    '#value' => $reward_title,
  );

  $form['receieved_date'] = array( 
    '#type' => 'date_popup', 
    '#date_format' => 'F j,Y',
    '#title' => "Receieved" ,
    '#default_value' => isset($receievingDate) ? $receievingDate : NULL,
  ); 

  $form['staff_notes'] = array(
     '#title' => t('Staff Notes'),
     '#type' => 'textarea',
     '#default_value' => isset($receievingNotes) ? $receievingNotes : NULL,
   );

  $form['submit_button'] = array(
     '#type' => 'submit',
     '#value' => t('SAVE'),
   );

  return $form;
}

// submit handler for form build in function claim_reward
function claim_reward_status_submit($form, &$form_state){

  $reward_status = $form_state['values']['reward_taken'];
  $staff_notes = $form_state['values']['staff_notes'];
  $reward_rid = $form_state['values']['rid'];
  $reward_receieved_date = $form_state['values']['receieved_date'];
  $rewardUser = $form_state['values']['username'];

  global $user;
  $uid = $user->uid;
  $staffUser = user_load($uid);

  $staff_name = $staffUser->name;

  if(isset($reward_receieved_date)){
    $reward_status = '1';
  }else{
    $reward_status = '0';
  }

  $query_staff = db_select('field_data_field_staff_user','stf')
    ->fields('stf', array('field_staff_user_value'))
    ->condition('entity_id',$reward_rid)
    ->execute()
    ->fetchAssoc();

  $query_pickup = db_select('field_data_field_rf_pickup_date','pckup')
    ->fields('pckup', array('field_rf_pickup_date_value'))
    ->condition('entity_id',$reward_rid)
    ->execute()
    ->fetchAssoc();

  $query_notes = db_select('field_data_field_staff_notes','notes')
    ->fields('notes', array('field_staff_notes_value'))
    ->condition('entity_id',$reward_rid)
    ->execute()
    ->fetchAssoc();

  if (empty($query_staff)) {
    db_insert('field_data_field_staff_user')
      ->fields(array(
        'entity_type' => 'reward',
        'bundle' => 'reward_claim',
        'deleted' => 0,
        'entity_id' => $reward_rid,
        'revision_id' => $reward_rid,
        'language' => 'und',
        'delta' => 0,
        'field_staff_user_value' => $staff_name,
        'field_staff_user_format' => NULL,
        ))
      ->execute();
  } else {
    db_update('field_data_field_staff_user')
      ->fields(array(
        'field_staff_user_value' => $staff_name
        ))
      ->condition('entity_id',$reward_rid)
      ->execute();
  }

  if (empty($query_pickup)) {
    db_insert('field_data_field_rf_pickup_date')
      ->fields(array(
        'entity_type' => 'reward',
        'bundle' => 'reward_claim',
        'deleted' => 0,
        'entity_id' => $reward_rid,
        'revision_id' => $reward_rid,
        'language' => 'und',
        'delta' => 0,
        'field_rf_pickup_date_value' => $reward_receieved_date,
        ))
      ->execute();
  } else{
    db_update('field_data_field_rf_pickup_date')
      ->fields(array(
        'field_rf_pickup_date_value' => $reward_receieved_date
        ))
      ->condition('entity_id',$reward_rid)
      ->execute();
  }

  if (empty($query_notes)) {
    db_insert('field_data_field_staff_notes')
      ->fields(array(
        'entity_type' => 'reward',
        'bundle' => 'reward_claim',
        'deleted' => 0,
        'entity_id' => $reward_rid,
        'revision_id' => $reward_rid,
        'language' => 'und',
        'delta' => 0,
        'field_staff_notes_value' => $staff_notes,
        'field_staff_notes_format' => NULL,
        ))
      ->execute();
  } else {
     db_update('field_data_field_staff_notes')
      ->fields(array(
        'field_staff_notes_value' => $staff_notes
        ))
      ->condition('entity_id',$reward_rid)
      ->execute();
  }

  db_update('field_data_field_receieving_status')
    ->fields(array(
      'field_receieving_status_value' => $reward_status
      ))
    ->condition('entity_id',$reward_rid)
    ->execute();
  
  if ($reward_status) {
    drupal_set_message(t('@user receives the reward', array('@user' => $rewardUser)), 'status');
  }

  $form_state['redirect'] = 'reward-winners';
}


/**
 * function for getting all the active raffle rewards
 */
function ppr_active_rafle_list(){

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','reward');
  $query->entityCondition('bundle','reward');
  $query->fieldCondition('field_category','value','raffle_reward');
  $query->fieldCondition('field_status_reward','value','active');
  $result = $query->execute();

  if (isset($result['reward'])) {
    $raffle_rewards_id = array_keys($result['reward']);
    $raffle_rewards = entity_load('reward', $raffle_rewards_id);

  foreach ($raffle_rewards as $raffle) {
    $options_raffle[$raffle->id] = $raffle->title;
  }
  return $options_raffle;
  }
}

/**
 * function for raffle entry page
 */
function ppr_raffle_entry_process($form, &$form_state) {

  $url = $GLOBALS['base_url'];
  $school = _get_options('schools');
  $library_branch = _get_options('library_branch');
  $grade = _get_options('grade');

  $form['active_raffle'] = array(
    '#title' => t('Select Raffle'),
    '#type' => 'select',
    '#options' => ppr_active_rafle_list() ? ppr_active_rafle_list() : array(''),  
    '#required' => TRUE,
  );

  $form['raffle_list'] = array(
    '#type' =>'markup',
    '#markup' => t("<a href = ".$url."/reward-winners>Show list of all the winners in this raffle</a>"),
  );

  $form['name_raffle'] = array(
    '#title' => t('Name of Drawing'),
    '#type' => 'textfield',
    '#description' => 'Please enter Branch or Systemwide',
    '#required' => TRUE,
  );

  $form['library_branch'] = array(
    '#title' => t('Library Branch'),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $library_branch, 
  );

  $form['school'] = array(
    '#title' => t('School'),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $school, 
  );

  $form['grade'] = array(
    '#title' => t('Grade'),
    '#type' => 'select',
    '#multiple' => TRUE,
    '#options' => $grade, 
  );

  $form['user_dob'] = array(
    '#type' => 'fieldset', 
    '#title' => t('Age in Years of User'),
    '#collapsible' => TRUE, 
    '#collapsed' => FALSE,
  );

  $form['user_dob']['dob_from'] = array(
    '#title' => t('From'),
    '#type' => 'textfield',
  );

  $form['user_dob']['dob_to'] = array(
    '#title' => t('To'),
    '#type' => 'textfield',
  );

  $form['pervious_this_wnrs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include previous winners of this raffle'),
    '#attributes' => array('value' => 2),
  );

  $form['pervious_all_wnrs'] = array(
    '#type' => 'checkbox',
    '#title' => t('Include previous winners of any raffles'),
  );

  $form['winners_selected'] = array(
    '#title' => t('Number of winners to be selected'),
    '#type' => 'textfield',
    '#required' => TRUE,
  );

  $form['back_button'] = array(
    '#type' =>'markup',
    '#markup' => t("<a href = ".$url."/admin/content/dashboard> Go Back </a>"),
  );

  $form['raff_winners'] = array(
    '#type' =>'markup',
    '#markup' => t("<input type = 'button' value = 'Draw Winners' id = 'raff_winners'>"),
  );

  $form['raffle_tbl'] = array(
    '#type' =>'markup',
    '#markup' => t("<div id ='reward_tbl' data-reveal-id='myModal'></div>"),
  );

  return $form;
}

/* Raffle user list by filter form */

function raffle_user_list($form, &$form_state) {
  $raffle_id = $_POST['raffle_id'];
  $rf_drawing_name = $_POST['rf_drawing_name'];
  $winners_selected = $_POST['no_needed'];
  $rf_grade = $_POST['rf_grade'];
  $rf_library = $_POST['rf_library'];
  $rf_sch = $_POST['rf_sch'];
  $rf_all = $_POST['rf_all'];
  $rf_this = $_POST['rf_this'];
  $rf_dob_sdate = $_POST['rf_dob_sdate'];
  $rf_dob_edate = $_POST['rf_dob_edate'];

  $library_id = explode(',', $rf_library);
  $school_id = explode(',', $rf_sch);
  $grade_id = explode(',', $rf_grade);

  if(!empty($library_id)) {
    foreach ($library_id as $value) {
      $user_lib = taxonomy_term_load($value);
      $user_lbs[] = $user_lib->name;   
    }
    $branchFilter = implode(',', $user_lbs);
  }
  if(!empty($school_id)) {
    foreach ($school_id as $value) {
      $user_school = taxonomy_term_load($value);
      $user_schs[] = $user_school->name;   
    }
    $schoolFilter = implode(',', $user_schs);
  }
  if(!empty($grade_id)) {
    foreach ($grade_id as $value) {
      $user_grd = taxonomy_term_load($value);
      $user_grds[] = $user_grd->name;
    }
    $gradeFilter = implode(',', $user_grds);
  }

  if ($rf_all == 0){
    $sub_query = db_select('eck_reward','eck');
    $sub_query->join('field_data_field_rf_receieved_reward','rf_win','eck.id = rf_win.entity_id');
    $sub_query->join('field_data_field_raffle_claim_id','claim','eck.id = claim.entity_id');
    $sub_query->condition('claim.field_raffle_claim_id_target_id', $raffle_id, '!=');
    $sub_query->condition('rf_win.field_rf_receieved_reward_value', 1);
    //$sub_query->condition('rf_win.language',$lang);
    $sub_query->fields('eck', array('uid'));
    $sub_query->execute()->fetchAll();
  }

  $query = db_select('eck_reward','eck');
  $query->join('field_data_field_rf_receieved_reward','rf_win','eck.id = rf_win.entity_id');
  $query->join('field_data_field_raffle_claim_id','claim','eck.id = claim.entity_id');
  $query->join('users','u','u.uid = eck.uid');
  $query->join('profile','pf','pf.uid = u.uid');

  if ($library_id[0] != 'null'){
    $query->join('field_data_field_library_branch','lb_brnch','lb_brnch.entity_id = pf.pid');
    $query->fields('lb_brnch', array('field_library_branch_tid'));
    $query->condition('lb_brnch.field_library_branch_tid',$library_id);
  }

  if ($school_id[0] != 'null') {
    $query->join('field_data_field_school','sch','sch.entity_id = pf.pid');
    $query->fields('sch', array('field_school_tid'));
    $query->condition('sch.field_school_tid',$school_id);
  }

  if ($grade_id[0] != 'null') {
    $query->join('field_data_field_user_grade','grade','grade.entity_id = pf.pid');
    $query->fields('grade', array('field_user_grade_tid'));
    $query->condition('grade.field_user_grade_tid',$grade_id);
  }

  $query->join('field_data_field_user_birthday','bday','bday.entity_id = pf.pid');
  $query->fields('u', array('uid'));
  $query->fields('rf_win',array('field_rf_receieved_reward_value'));
  $query->fields('eck', array('id'));

  //Condition for age range
  if(!empty($rf_dob_sdate) && !empty($rf_dob_sedate)){
    $start_age_ts = time() - ($rf_dob_sdate*(60*60*24*365));
    $end_age_ts = time() - ($rf_dob_edate*(60*60*24*365));
    $age_range =  array($start_age_ts, $end_age_ts);
    $query->condition('bday.field_user_birthday_value', $age_range, 'IN');
  }

  $query->fields('bday', array('field_user_birthday_value'));
  $query->condition('eck.type','raffle_claim');

  //get results based on Checkbox for including winners checkboxess
  $query->condition('claim.field_raffle_claim_id_target_id', $raffle_id);
  
  if($rf_this == 0){
    $query->condition('rf_win.field_rf_receieved_reward_value', 0);
  }
    // $query->condition('rf_win.language',$lang);
  if($rf_all == 0){
    $query->condition('eck.uid', $sub_query, 'NOT IN');
  }

  $result_all = $query->execute()->fetchAll();
  // echo '<pre>'; print_r($result_all);die();

  $tbl_header = array(
    'Username',
    'First Name',
    'Last name',
    'Date of Birth',
    'Email Address',
    'Phone Number',
    'Name of Drawing',
    'Filters Used'
  );

  $draw_time = time();

  //Getting all user_uids in an array 
  foreach ($result_all as $value) {
    $user_uid[] = $value->uid;
  }

  // Getting length of unique uids
  $arrUniLength = sizeof(array_unique($user_uid));

  // Check if winner selected is less than unique list of users
  if ($winners_selected <= $arrUniLength) {
    // for loop for filtering out repeated users
    for ($i = 0; $i < $winners_selected; $i++){
      // check if users are present for filtered condition
      if (sizeof($user_uid) > 0){
        // Picking up random user from list of all users.
        $random_number = rand(0, sizeof($user_uid)-1);
        $val_to_claim = $user_uid[$random_number];
        //Add UID toList of UIDs for Reward Claim
        $claim_UIDs[]=$val_to_claim;
        $rewardClaim = TRUE;
        // Removing the repeated users.
        foreach ($user_uid as $value) {
          if ($value <> $val_to_claim ){
            $distinct_ids[] =  $value;
          }
        }
        $user_uid = $distinct_ids;
        unset($distinct_ids);
      }
    }

    // Claim reward for all ser ids in claim array
    if (sizeof($claim_UIDs)>0){
      foreach ($claim_UIDs as $value) {
        pl_update_raffle_tbl($value, $raffle_id, $rf_drawing_name);
        pl_reward_claim($raffle_id, $value, 'reward', $filters_used, $rf_drawing_name, 1, $draw_time);
      }
    }

    $filters_used = $branchFilter .' '.$schoolFilter .' '.$gradeFilter;

    $qry = db_select('profile', 'pf');
    $qry->join('eck_reward', 'eck', 'eck.uid = pf.uid');
    $qry->join('field_data_field_raff_draw_timestamp', 'time', 'time.entity_id = eck.id');
    $qry->join('users', 'u', 'u.uid = pf.uid');
    $qry->join('field_data_field_first_name', 'fn', 'fn.entity_id = pf.pid');
    $qry->join('field_data_field_last_name', 'ln', 'ln.entity_id = pf.pid');
    $qry->join('field_data_field_user_birthday', 'dob', 'dob.entity_id = pf.pid');
    $qry->join('field_data_field_phone_number', 'phn', 'phn.entity_id = pf.pid');
    $qry->fields('u', array('name', 'mail'));
    $qry->fields('fn', array('field_first_name_value'));
    $qry->fields('ln', array('field_last_name_value'));
    $qry->fields('dob', array('field_user_birthday_value'));
    $qry->fields('phn', array('field_phone_number_value'));
    $qry->condition('u.uid', $claim_UIDs);
    $qry->condition('time.field_raff_draw_timestamp_value', $draw_time);

    $res = $qry->execute()->fetchAll();

    // echo '<pre>'; print_r($res); die('qwe');

    foreach ($res as $value) {
      $tbl_rows[] = array(
        array( 'data' => $value->name),
        array( 'data' => $value->field_first_name_value),
        array( 'data' => $value->field_last_name_value),
        array( 'data' => $value->field_user_birthday_value),
        array( 'data' => $value->mail),
        array( 'data' => $value->field_phone_number_value),
        array( 'data' => $rf_drawing_name),
        array( 'data' => $filters_used),
      );

    }

    //Get winner list for current draw
    if (!empty($tbl_rows)) {
      $output = "<div id = 'rf-tbl'>";
      $output .= theme('table', array( 'header' => $tbl_header, 'rows' => $tbl_rows, 'attributes' => array('border' => 1, 'style' =>"border-collapse: collapse")));
      $output .= "</div>";
      $output .= "<input type = 'button' value = 'Print' id = 'print_raffle'>";
      echo $output;
    }
  } else {
    echo t('<div id ="error_raffle">Number of entries for the filters selected is less than number of winners to be selected, please change the filters or reduce the number of winners to be selected</div>');
  }
}

//Function to update raffle entry
function pl_update_raffle_tbl($user_id, $raffle_id, $rf_drawing_name){

  $query = db_select('eck_reward','eck');
  $query->join('field_data_field_raffle_claim_id','claim','eck.id = claim.entity_id');
  $query->fields('eck',array('id'));
  $query->condition('claim.field_raffle_claim_id_target_id', $raffle_id);
  $query->condition('eck.uid',$user_id);
  $sub_query = $query->execute()->fetchAll();

  // echo '<pre>'; print_r($sub_query); die();

  foreach ($sub_query as $value) {
    $reward_claim = entity_load('reward', array($value->id));
    $reward_claim = reset($reward_claim);
    //Get reward field language codes
    $lang = field_language('reward',$reward_claim);
    foreach ($lang as $key => $value) {
      ${$key} = $value;
    }
    $reward_claim->field_rf_receieved_reward[$field_rf_receieved_reward][0]['value'] = 1;
    $reward_claim->field_raffle_drawing_name[$field_raffle_drawing_name][0]['value'] = $rf_drawing_name;
    entity_save('reward', $reward_claim);
    // $raffle_rewards_id[] = $value->id;
  }
}


function update_raffle_winner_tbl($raffle_id, $rf_drawing_name) {

  db_update('field_data_field_rf_receieved_reward')
    ->fields(array('field_rf_receieved_reward_value' => 1))
    ->condition('entity_id', $raffle_id)
    ->execute();

  db_update('field_data_field_raffle_drawing_name')
    ->fields(array('field_raffle_drawing_name_value' => $rf_drawing_name))
    ->condition('entity_id', $raffle_id)
    ->execute();
}


function _get_options($vocab_name) {
  $term_list = taxonomy_vocabulary_machine_name_load($vocab_name);
  $tree = taxonomy_get_tree($term_list->vid);
  $options = array();
  foreach ($tree as $value) {
    $options[$value->tid] = $value->name;
  }
  return $options;
}


function user_progress() {
  global $user;
  $uid = $user->uid;
  $out = '';

   $quer = db_select('eck_activity', 'eck_a');
    $quer->LEFTJOIN ('field_data_field_activity_entry_activity' , 'fdfae' , 'fdfae.entity_id = eck_a.id');
    $quer->join('field_data_field_activity_fired_hook', 'hook', 'hook.entity_id = fdfae.field_activity_entry_activity_target_id');
    $quer->condition('eck_a.uid', $uid);
    $quer->condition('eck_a.type', 'activity_entry');
    $quer->condition('hook.field_activity_fired_hook_value', 'progress_page');
    $quer->fields('eck_a', array('title'));
    $resu = $quer->execute()->fetchAll();
    $day_count = count($resu);
    if($day_count == 1) {
      $out = t("<span class='msg-highlight'>Total day read: $day_count</span><br/>");
    }
    else {
      $out = t("<span class='msg-highlight'>Total days read: $day_count</span><br/>");
    } 

    return "<div>$out</div>";

}




function play_program_raffle_menu_alter(&$items) {
  global $user;
  if($user->roles[1] == 'anonymous user') {
    $items['staff/register']['access callback'] = FALSE;
  }
}


/**
 *  Function for alter registration form for language selection
 */

function play_program_raffle_form_user_register_form_alter(&$form, &$form_state, $form_id) {

  $languages = language_list();
  $names = array();
  foreach ($languages as $key => $language) {
  $names[$key] = t($language->name);
  }
  global $language;

  $form['account']['locale']['language'] = array(
    '#type' => (count($names) <= 5 ? 'radios' : 'select'),
    '#title' => t('Language'),
    '#default_value' => $language->language,
    '#options' => $names,
    '#description' => t("Prefered language for you account."),
  );
  
  // Use exactly the same access logic as the original,
  // without checking for the 'administer users' permission
  $form['account']['locale']['#access'] = ($form['#user_category'] == 'account' || ($form['#user_category'] == 'register'));
}
