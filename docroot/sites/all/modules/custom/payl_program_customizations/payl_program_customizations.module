<?php

/**
 * Implements hook_user_load().
 */
function payl_program_customizations_user_load($users) {

  // foreach($users as $account) {
  //   $profile = profile2_load_by_user($account, 'main');
  //   if (!empty($profile) && !empty($profile->field_user_birthday)) {
  //     $birthday = new DateObject($profile->field_user_birthday[LANGUAGE_NONE][0]['value']);
  //     $now = date_now();
  //     $diff = $birthday->difference($now, 'years');
  //     if ($diff <= 5) {
  //       $account->roles[5] = 'Patron pre-reader';
  //     }
  //     if ($diff >= 6 && $diff <= 12) {
  //       $account->roles[6] = 'Patron kids';
  //     }
  //     if ($diff >= 13 && $diff <= 17) {
  //       $account->roles[7] = 'Patron teen';
  //     }
  //     if ($diff >= 18) {
  //       $account->roles[8] = 'Patron adult';
  //     }
  //   }
  // }

  // drupal_static_reset('user_access');
}

function age($date){
  list($year,$month,$day) = explode("-",$date);
  $year_diff  = date("Y") - $year;
  $month_diff = date("m") - $month;
  $day_diff   = date("d") - $day;
  if ($day_diff < 0 || $month_diff < 0);
  return $year_diff;
}

/**
 * Implements hook_form_alter().
 */
function payl_program_customizations_form_alter(&$form, &$form_state, $form_id) {

  /* making staff registration email field required */
  if($form_id == 'user_register_form') {
    $arg = arg(3);
    if($arg == 'staff') {
      $form['account']['mail']['#required'] = TRUE;
    }
  }

  if ($form_id == 'user_profile_form') {

    global $user, $base_url;
    $uid = $user->uid;

    $user_p = profile2_load_by_user($uid);

    if(isset($user_p)){
      $user_dob_patron = $user_p['main']->field_user_birthday['und'][0]['value'];
      $user_dob_split = explode(' ', $user_dob_patron);
      $user_dob = $user_dob_split[0];

      $userAge = age($user_dob);

      $setting = array(
        'payl_program_customizations' => array(
          'payl_program_customizations_user_date_of_birth' => $userAge,
        )
      );

      drupal_add_js($setting, 'setting');
    }


    // showing of tabs only for user role as patron
    if(array_key_exists(6, $role_user)){



      // drupal_add_js(drupal_get_path('module', 'payl_program_customizations') . '/payl_program_customizations.js');

      $form['current_username'] = array(
        '#markup' => '<h3 class="username-curr">Username: <span class="current-username"></span></h3>',
        '#weight' => 1,
      );

      $form['public_profile'] = array(
        '#markup' => t("<a href='$base_url/users/public_profile/$uid' class = 'button'>My Public Profile</a>"),
        '#weight' => -20,
      );

      $form['change_username'] = array(
        '#markup' => t("<a href='$base_url/user/$uid/edit' class = 'button'>Change My Username or Password</a>"),
        '#weight' => -20,
      );
    }
  }

  if ($form_id == 'user_register_form') {

    $form_state['rebuild'] = TRUE;
    $setting = array(
      'payl_program_customizations_birthday_limit' => strtotime('-13 years'),
    );

    drupal_add_js($setting, array('type' => 'setting'));
    drupal_add_js(drupal_get_path('module', 'payl_program_customizations') . '/payl_program_customizations.js');

    $form['current_username'] = array(
      '#markup' => '<h3 class="username-curr">Username: <span class="current-username"></span></h3>',
      '#weight' => 1,
    );

    $form['#validate'][] = 'payl_program_customizations_user_register_validate';

    if (!empty($form['profile_main'])) {
      $form['profile_main']['field_user_address'][LANGUAGE_NONE][0]['name_block'] = array(
        '#type' => 'value',
        '#value' => 'User address',
      );
      $form['profile_main']['field_user_address'][LANGUAGE_NONE][0]['organisation_block'] = array(
        '#type' => 'value',
        '#value' => '',
      );
    }
    $form['#submit'][] = 'email_notification_settings';
  }

  //To provide a message if user has no email mentioned during registration
  if($form_id == 'user_pass'){
    $form['#validate'][1] = 'password_user'; //function to validate the user
    $form['name']['#title'] = '<div class="user_pass_name">Please enter your username</div>'.'<div class="user_pass">If you do not have an email address, you need to seek staff assistance to reset your password</div>';
    $form['actions']['submit']['#value'] = 'Submit';
  }

  // changing of display field name for reward entity
  if($form_id == 'eck__entity__form_edit_reward_reward' || $form_id == 'eck__entity__form_add_reward_reward'){
    $form['field_reward_message']['und'][0]['#title'] = 'Onscreen Alert';
    $form['field_reward_notification']['und'][0]['#title'] = 'Message';
  }

  // Changing of text from participants to Sender
  if ($form_id == 'privatemsg_list') {
    $form['updated']['list']['#header']['participants']['data'] = t('Sender');
  }

  // Increasing string length
  if ($form_id == 'user_register_form') {
    $form['profile_main']['field_do_you_want_other_players_']['und']['#title'] = t('Do you want other players to be able to see your badges and prizes when they click on your username? They won\'t be able to see your real name.');
  }

  // Changing of button text from Add new Badge to Add Badge Image
  if ($form_id == 'eck__entity__form_add_reward_reward') {
    $form['field_reward_badge']['und']['actions']['ief_add']['#value'] = t('Add Badge Image');
  }

  //Show activities with only progress page firing hooks
  if($form_id == 'review_activity_node_form'){
    //Get self reported activity list
    // print_r($form['field_activity']['und']['#options']);die();
    $self_act = db_select('field_data_field_activity_fired_hook', 'fir_hook');
    $self_act->JOIN('field_data_field_activity_id', 'fdfai', 'fdfai.field_activity_id_value = fir_hook.entity_id');
    $self_act->condition('fir_hook.field_activity_fired_hook_value', 'progress_page');
    $self_act->fields('fdfai', array('entity_id'));
    $self_act_list = $self_act->execute()->fetchAll();
    // print_r($self_act_list);
    foreach ($self_act_list as $key => $value) {
      $array_unset_index[$value->entity_id] = $value->entity_id; 
    }

    // unset($form['field_activity']['und']['#options'][137]);
    $form['field_activity']['und']['#options']=(array_intersect_key($form['field_activity']['und']['#options'], $array_unset_index));
    // print_r($form['field_activity']['und']['#options']);die();
    //remove activities which are not from self reported activity list
  }
}

function payl_program_customizations_user_register_validate($form, &$form_state) {
  $values = $form_state['values'];
  if (empty($values['name'])) {
    form_set_error('name', t('Please ensure to create your own username OR generate a new username'));
  }
}

 //function to provide a message if user has no email associated with account.
function password_user(&$form, &$form_state){

 $form_value = $form_state['complete form']['name']['#value'];
  if (filter_var($form_value, FILTER_VALIDATE_EMAIL)) {
       drupal_set_message('Please enter only username','error');
  }

  $mail_id = $form_state['values']['account'];
  $mail = $mail_id->mail;
  if($mail == ''){
    drupal_set_message('Please seek the staff assistance to reset your password','error');
  }else{
    drupal_set_message('Login details have been sent to your e-mail address.');
  }
}

//function for private message when a user is followed
function payl_program_customizations_flag_flag($flag, $entity_id, $account, $flagging){
  $flag_name = arg(2);
  if($flag_name == 'follow'){
    $uid = $flagging->entity_id;
    $user_name = $account->name;
    privatemsg_new_thread(array(user_load($uid)), $user_name.' is now following you.', $user_name.' is now following you.');
  }
}


// function payl_program_customizations_menu(){
//   $items = array();

//  $items['test-activity'] = array(
//     'page title' => 'BProgress',
//     'page callback' => 'payl_program_customizations_review_selectlist',
//     'access arguments' => array('progress page access'), // permission for view progress page
//     'type' => MENU_CALLBACK,
//     // 'file' => 'inc/pl_progress_page.inc',
//     // 'file path' => drupal_get_path('module', 'play_progress_teen'),
//   );

//   return $items;
// }

/**
 * Access Callback for /projects page.
//  */
// function payl_program_customizations_access_check() {
//   global $user;
//   if($user->uid){
//     return TRUE;
//   }else{
//     return FALSE;
//   }
// }

/**
/Implement hook permissions
**/
function payl_program_customizations_permission() {
   return array(
    'progress page access' => array(
      'title' => t('View Bingo Card Progress Page'),
      'description' => t('Access to view bingo card progress page'),
    ),
    'report progress' => array(
      'title' => t('Report progress theough Bingo Card Progress Page'),
      'description' => t('Report progress theough Bingo Card Progress Page'),
    ),

  );
}


/*
/Function to prinf activity review list box links
*/
function play_library_program_review_selectlist($nid){
  global $user;
 //query to retun reqired field values
  $que = db_select('field_data_field_activity_list', 'fdfal');
  $que->JOIN('field_data_field_label_for_read_review' , 'fdflfrr', 'fdflfrr.entity_id=fdfal.entity_id');
  $que->JOIN('field_data_field_label_for_write_review' , 'fdflfwr', 'fdflfwr.entity_id=fdfal.entity_id');
  $que->JOIN('field_data_field_read_review' , 'fdfrr', 'fdfrr.entity_id=fdfal.field_activity_list_tid');
  $que->JOIN('field_data_field_write_review' , 'fdfwr', 'fdfwr.entity_id=fdfal.field_activity_list_tid');
  $que->CONDITION('fdfal.entity_id', array($nid), 'IN');
  $que->FIELDS('fdfrr', array('field_read_review_title'));
  $que->FIELDS('fdfrr', array('field_read_review_url'));
  $que->FIELDS('fdfwr', array('field_write_review_title'));
  $que->FIELDS('fdfwr', array('field_write_review_url'));
  $que->FIELDS('fdflfrr', array('field_label_for_read_review_value'));
  $que->FIELDS('fdflfwr', array('field_label_for_write_review_value'));
  $res = $que->execute()->fetchAll();
  // echo "<pre>";
  // print_r($res);die();
  $activity_write_fields_title['all'] = 'select from following';
  $activity_read_fields_title['all'] = 'Select from following';

  //$activity_read_fields[0] = t('--Select from the following--');
  //$activity_write_fields[0] = t('--Select from the following--');
  foreach ($res as $key => $value) {
    if (!empty($value->field_read_review_url) && !empty($value->field_read_review_title)){
      $activity_read_fields_title[$value->field_read_review_url] = $value->field_read_review_title;
    }
    if (!empty($value->field_write_review_url) && !empty($value->field_write_review_title)){
      $activity_write_fields_title[$value->field_write_review_url] = $value->field_write_review_title;
    }
  }

  if(count($res)>0){
   //Create dropdowns for read and write reviews.
    $form['read activity'] = array(
      '#type' => 'select',
      '#title' => $res[0]->field_label_for_read_review_value,
      '#options' => $activity_read_fields_title,
      '#multiple' => FALSE,
      '#default_value' => '--Select an activity--',
      '#attributes' => array('class'=>array('activity-form-element'),'urls'=>array($value->field_read_review_url)),
      );
    if($user->uid > 0) {
      $form['write activity'] = array(
        '#type' => 'select',
        '#title' => $res[0]->field_label_for_write_review_value,
        '#options' => $activity_write_fields_title,
        '#multiple' => FALSE,
        '#default_value' => '--Select an activity--',
        '#attributes' => array('class'=>array('activity-form-element')),
      );
    }
    return $form;
  }
  else{
    return False;
  }
}


// function for email notification settings.
function email_notification_settings($form, &$form_state) {
  $user_uid = $form['#user']->uid;
  $email_not_field_value = $form['#user']->profile_main['field_receive_notifications'][LANGUAGE_NONE][0]['value'];
    if($email_not_field_value == 'no') {
       $insert_query = db_insert('pm_email_notify')
        ->fields(array(
          'user_id'=>$user_uid,
          'email_notify_is_enabled'=>0,
          ));
        $insert_query->execute();
    }
}

/*
/Update dropdown list to only show self reported activities
*/
// function payl_program_customizations_review_activity_node_form_alter(&$form, &$form_state){
//   print "bingo"; die();
// }