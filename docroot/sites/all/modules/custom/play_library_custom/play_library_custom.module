<?php
/**
 * @file
 * Module for custom settings for Library Program
 *
 * This module includes form alter, hook_menu,
 * custom blocks
 */


/**
 * Implementation of hook_menu()
 */
function play_library_custom_menu() {

  // Page for User's Reviews Submitted
  $items['my-reviews'] = array(
    'title' => 'Reviews',
    'page callback' => 'pl_user_reviews',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  // Page for User's Booklists Submitted
  $items['my-booklist'] = array(
    'title' => 'Booklist',
    'page callback' => 'pl_user_booklist',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  //Activities Landing page
  $items['activities'] = array(
    'title' => 'Activities for Program',
    'page callback' => 'pl_activities_page',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
    'file' => 'inc/pl_hotspot_activities_block.inc',
    'file path' => drupal_get_path('module', 'play_library_custom'),
  );

  // Author's username in autocomplete field
  $items['author/autocomplete'] = array(
    'title' => 'Author Name',
    'page callback' => '_author_name_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'inc/pl_functions.inc',
    'file path' => drupal_get_path('module', 'play_library_custom'),
  );

  return $items;
}

/**
 * Implementation of hook_form_alter()
 */
function play_library_custom_form_alter(&$form, &$form_state, $form_id) {

  $sub_title = variable_get('review_pre_header');
  $catalog_link = variable_get('catalog_link_for_program');
  $library_abbreviation = variable_get('library_abbreviation');
  $email_desc = variable_get('email_description_field');

  if($form_id == 'movie_review_node_form'){
    //hidding label for other option field
    $form['field_genre_other_option'][LANGUAGE_NONE][0]['value']['#title'] = NULL;
    $form['title']['#prefix'] = $sub_title;
    $form['field_catalog_link_movie_review'][LANGUAGE_NONE][0]['#description'] = t('Please enter a link to the movie in the').' <a href='.$catalog_link.' target="_blank">'.$library_abbreviation.t(' catalog').'</a>'. t('so that other readers can find it easily.');

    //Removing of N/A radio button
    unset($form['field_genre']['und']['#options']['_none']);
    unset($form['field_language']['und']['#options']['_none']);
    unset($form['field_rating']['und']['#options']['_none']);
    unset($form['field_please_select_one']['und']['#options']['_none']);

    //Changing default title
    drupal_set_title('Write a Movie Review');
  }

  if($form_id == 'music_review_node_form') {
    $form['field_artist_performer'][LANGUAGE_NONE][0]['#prefix'] = $sub_title;
    $form['title']['#title'] = t('Album or Song Title');
    $form['field_genre_other_option_music'][LANGUAGE_NONE][0]['value']['#title'] = NULL;
    $form['field_catalog_link_music'][LANGUAGE_NONE][0]['#description'] = t('Please enter a link to the music in the').'<a href='.$catalog_link.' target="_blank">'.$library_abbreviation.t(' catalog').'</a>'.t(' so that other readers can find it easily.');

    unset($form['field_please_select_one_music']['und']['#options']['_none']);
    unset($form['field_genre_music']['und']['#options']['_none']);

    drupal_set_title('Write a Music Review');
  }

  if($form_id == 'video_game_review_node_form') {
    $form['title']['#prefix'] = $sub_title;
    $form['field_catalog_link_video_game'][LANGUAGE_NONE][0]['#description'] = t('Please enter a link to the video game in the').' <a href='.$catalog_link.' target="_blank">'.$library_abbreviation.t(' catalog').'</a>'.t(' so that other readers can find it easily.');
    $form['field_platform_other_option'][LANGUAGE_NONE][0]['value']['#title'] = NULL;

    unset($form['field_please_select_videogame']['und']['#options']['_none']);
    unset($form['field_age_rating_of_game']['und']['#options']['_none']);

    drupal_set_title('Write a Video Game Review');
  }

  if($form_id == 'review_activity_node_form') {
    $tid = arg(3);
    if(isset($tid)) {
      $form['field_activity']['und']['#default_value'] = $tid;
    } 
    
  }

  // Adding purchase link for booklist
  if($form_id == 'booklist_node_form') {
    $form['purchase_link'] = array(
      '#type' => 'link',
      '#title' => t('Suggest a purchase'),
      '#href' => variable_get('pmc_purchase_link'),
      '#attributes' => array('target' => '_blank'),
      '#weight' => 3,
    );
  }

  //Changing of description text for email field
  if($email_desc != ''){
    if($form_id == 'user_register_form'){
      $form['account']['mail']['#description'] = $email_desc;
    }
  }
  return $form;
}

/**
 * Implements hook_block_info().
 */
function play_library_custom_block_info() {
  $blocks = array();

  // Custom view for private message
  $blocks['pm_block'] = array(
    'info' => t('Private Message Dashboard Block'),
  );

  // Homepage Booklist Slider
  $blocks['homepage_slider'] = array(
    'info' => t('Homepage booklist slider Block'),
  );

  // Menu block for mobile view
  $blocks['menu_for_mobile'] = array(
    'info' => t('Menu block for mobile'),
  );

  $blocks['write_review_block'] = array(
    'info' => t('Write a review block'),
  );

  $blocks['program_rewards_block'] = array(
    'info' => t('Program Rewards Block'),
  );

  $blocks['hotspot_activity_block'] = array(
    'info' => t('Hotspot activities block'),
  );

  $blocks['leaderblock_dashboard'] = array(
    'info' => t('Leaderboard block for dashboard'),
  );
  //Block For Library Program Image
  $blocks['program_logo_image'] = array(
    'info' => t('Library Logo Image'),
  );
  //Block For Library Program Footer Content
  $blocks['program_footer_content'] = array(
    'info' => t('Library Footer Content'),
  );


  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function play_library_custom_block_view($delta = '') {
  $block = array();

  switch($delta) {
    case 'pm_block' :
      $block['content'] = pl_pm_block_view();
      break;

    case 'homepage_slider' :
      $block['content'] = pl_homepage_slider();
      break;

    case 'menu_for_mobile' :
      $block['content'] = pl_header_menu_mobile();
      break;

    case 'write_review_block' :
      $block['content'] = drupal_get_form('pl_creating_review');
      break;

    case 'program_rewards_block' :
      $block['content'] = pl_view_rewards_block();
      break;

    case 'hotspot_activity_block' :
      $block['content'] = pl_hotspot_activities();
      break;

    case 'leaderblock_dashboard' :
      $block['content'] = pl_leaderblock_dashboard();
      break;

    case 'program_logo_image' :
      $block['content'] = pl_program_logo_image();
      break;

    case 'program_footer_content' :
      $block['content'] = pl_program_footer_content();
      break;
  }

  return $block;
}

/**
 * Implements hook_date_combo_process_alter().
 *
 * Disabling of future dates for dob field
 */
function play_library_custom_date_combo_process_alter(&$element, &$form_state, $context){

  if($context['form']['#form_id'] == 'user_register_form' || $context['form']['#form_id'] == 'user_profile_form') {
    $element["value"]['#datepicker_options'] = array(
      'maxDate' => '+0D'
    );
    $element["value2"]['#datepicker_options'] = array(
      'maxDate' => '+0D'
    );
  }
}

/**
 * function to return a empty page for users book reviews.
 */
function pl_user_reviews() {
  return '';
}

/**
 * function to return a empty page for view users booklists.
 */
function pl_user_booklist() {

  return '';
}

/**
 * function for custom view of private message block.
 */
function pl_pm_block_view() {

  global $user;
  $current_user = $user->uid;

  $query_pm = db_select('pm_index','pi');
  $query_pm->fields('pi',array('mid','is_new','deleted'));
  $query_pm->join('pm_message','pmsg','pmsg.mid = pi.mid');
  $query_pm->join('users','u','u.uid = pmsg.author');
  $query_pm->fields('u',array('name'));
  $query_pm->condition('recipient',$current_user,'=');
  $query_pm->condition('deleted',0,'=');
  $query_pm->orderBy('timestamp', 'DESC');
  $query_pm->range(0,2);
  $query = $query_pm->execute()
  ->fetchAll();

  $no_result = count($query);
  $output = '<div class = "pm-custom"><div>';

  if ($no_result != 0) {
    foreach($query as $res) {
      $msg_id = $res->mid;
      $deleted = $res->deleted;
      $author = $res->name;

      $result = db_select('pm_message','pm')
      ->fields('pm',array('subject','timestamp'))
      ->condition('mid',$msg_id,'=')
      ->execute()
      ->fetchAssoc();

      $pm_new = $res->is_new.'<br/>';
      if($pm_new == 1){
        $new = '<div class = "pm-new">'.'NEW! '.'</div>';
      }

      $output .= '<div class="pm">'.'<div class = "pm-subject"><a href = '.'../messages/view/'.$msg_id.'>'.$new.'<span>'.$pm_subject = $result['subject'].'</span></a></div>'.'<div class = "pm-admin">'.$author.'</div>'.'<div class = "pm-date">'.$pm_date = date('F d, Y',$result['timestamp']).'</div>'.'</div>';
    }
    return $output.'</div><div><a class="pm-view btn btn-large" href="../messages">'.t('View All Messages').'</a>'.'</div></div>';
  } else {
    return t('No Messages to display');
  }
}

/**
 * Function callback for homepage booklist slider.
 */
function pl_homepage_slider(){

 $output .= '<div class="homepage-booklist-slider"><div class="controls">';
  $output .= '<ul class="booklist-pager"><input type="radio" name="colorRadio" id="r1" value="blslider1" checked><label for="r1"></label><input type="radio" name="colorRadio" id="r2" value="blslider2"><label for="r2"></label><input type="radio" name="colorRadio" id="r3" value="blslider3"><label for="r3"></label></ul></div>';
  $block = module_invoke('views', 'block_view', 'book_reviews_dashboard-block_3');
  $output .= '<div class="blslider1 slide open">'. render($block['content']). '</div>';

  $block = module_invoke('views', 'block_view', 'book_reviews_dashboard-block_4');
  $output .= '<div class="blslider2 slide close">'. render($block['content']). '</div>';

  $block = module_invoke('views', 'block_view', 'book_reviews_dashboard-block_5');
  $output .= '<div class="blslider3 slide close">'. render($block['content']). '</div></div>';

  return $output;
}

/**
 * Function callback for header menu for mobile view
 */
function pl_header_menu_mobile(){

  $block = module_invoke('views', 'block_view', 'header_menus-block_1');
  $output .= render($block['content']). '</div>';

  $block = module_invoke('menu', 'block_view', 'menu-secondary-menu');
  $output .= render($block['content']). '</div>';

  return $output;
}

/**
 * Function callback for creating reviews
 */
function pl_creating_review($form, $form_state){

  global $base_url;

  $no_review = $base_url.'/reviews';
  $link_book_review = $base_url.'/node/add/review-book';
  $link_movie_review = $base_url.'/node/add/movie-review';
  $link_music_review = $base_url.'/node/add/music-review';
  $link_video_game_review = $base_url.'/node/add/video-game-review';
  $link_activity_review = $base_url.'/node/add/review-activity';

  $values = array(0 => t('Select Review'),
    $link_book_review => t('Book Reviews'),
    $link_activity_review => t('Activity Reviews'),
    $link_movie_review => t('Movie Reviews'),
    $link_music_review => t('Music Reviews'),
    $link_video_game_review => t('Video Game Reviews'));

  $form['review_options'] = array(
    '#title' => t('Write A Review'),
    '#type' => 'select',
    '#description' => t('Select Review type'),
    '#options' => $values,
    '#attributes' => array(
      'class' => array('add_review_node')
    )
  );

  return $form;
}

function pl_view_rewards_block(){

  $block = module_invoke('views', 'block_view', 'program_rewards-block_1');
  $output = render($block['content']);

  $block = module_invoke('views', 'block_view', 'program_rewards_raffle-block_1');
  $output .= render($block['content']);

  return $output;
}

/**
 * function callback for hotspot activities block
 */
function pl_hotspot_activities() {

  global $base_url;

  $link_book_review = $base_url.'/node/add/review-book';
  $link_movie_review = $base_url.'/node/add/movie-review';
  $link_music_review = $base_url.'/node/add/music-review';
  $link_video_game_review = $base_url.'/node/add/video-game-review';
  $link_booklist = $base_url.'/node/add/booklist';

  $view_book_review = $base_url.'/reviews';
  $view_movie_review = $base_url.'/movie-review';
  $view_music_review = $base_url.'/music-review-listing';
  $view_video_game_review = $base_url.'/video-game-review';
  $view_booklist = $base_url.'/booklists';
  $view_activity_review = $base_url.'/activities';

  $view_reviews = array(0 => t('Select from the following'),
  $view_book_review => t('Book Reviews'),
  $view_movie_review => t('Movie Reviews'),
  $view_music_review => t('Music Reviews'),
  $view_video_game_review => t('Video Game Reviews'));

  $add_reviews = array(0 => t('Select from the following'),
  $link_book_review => t('Book Reviews'),
  $link_movie_review => t('Movie Reviews'),
  $link_music_review => t('Music Reviews'),
  $link_video_game_review => t('Video Game Reviews'));

  $form['activity_title'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('hotspot_block_title'),
    '#prefix' => '<div class="activity_title">',
    '#suffix' => '</div>',
    '#weight' => 1,
  );

  $form['activity_description'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('hotspot_block_description'),
    '#prefix' => '<div class="activity_desc">',
    '#suffix' => '</div>',
    '#weight' => 2,
  );


  $form['activities_read_list'] = array(
    '#title' => t('Read Reviews of Bay Area Hot Spots'),
    '#type' => 'select',
    '#options' => pl_activities_view_select_list('hotspot_activities','1'),
    '#attributes' => array(
      'class' => array('activities_list_read')
    ),
    '#weight' => 3,
  );

  global $user;
  $current_user = $user->uid;

  if($current_user != 0){
    $form['activities_submit_list'] = array(
      '#title' => t('Submit a Review'),
      '#type' => 'select',
      '#options' => pl_activities_submit_select_list('hotspot_activities','1'),
      '#attributes' => array(
        'class' => array('activities_list_submit')
      ),
      '#weight' => 4,
    );
  }

  if($current_user != 0){
    $form['suggest_link'] = array(
      '#type' => 'link',
      '#title' => variable_get('hotspot_block_link_title'),
      '#href' => variable_get('hotspot_block_link'),
      '#attributes' => array('target' => '_blank'),
      '#prefix' => '<div class="suggest-link">',
      '#suffix' => '</div>',
      '#weight' => 5,
    );
  }

  $form['activity_review_title'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('review_activity_block_title'),
    '#prefix' => '<div class="activity_review_title">',
    '#suffix' => '</div>',
    '#weight' => 6,
  );

  $form['activity_review_description'] = array(
    '#type' => 'markup',
    '#markup' => variable_get('review_activity_block_description'),
    '#prefix' => '<div class="activity_review_desc">',
    '#suffix' => '</div>',
    '#weight' => 7,
  );

  if($current_user != 0){
    $form['read_submit'] = array(
      '#title' => t('Write a Review'),
      '#type' => 'select',
      '#options' => $add_reviews,
      '#attributes' => array(
        'class' => array('reviews_add')
      ),
      '#weight' => 8,
    );
  }

  $form['read_reviews'] = array(
    '#title' => t('Read Existing Reviews'),
    '#type' => 'select',
    '#options' => $view_reviews,
    '#attributes' => array(
      'class' => array('reviews_list_view')
    ),
    '#weight' => 9,
  );

  return $form;
}

/**
 * Implementation of hook_form_profile2_edit_PROFILE_NAME_form_alter()
 *
 * Showing of user avatars in tab format
 */
function play_library_custom_form_profile2_edit_main_form_alter(&$form, $form_state) {
  $form['profile_main']['field_user_avatar'] = array('#attributes' => array('style' => 'display:none'));

  $query = db_select('field_data_field_avatar_type','type');
  $query->fields('type',array('field_avatar_type_tid','entity_id'));
  $query->join('eck_avatar','eck','eck.id = type.entity_id');
  $query->join('taxonomy_term_data','tax','tax.tid = type.field_avatar_type_tid');
  $query->fields('tax',array('name'));
  $query->fields('eck',array('title'));
  $query_avatar = $query->execute()->fetchAll();

  $output = '';
  $output .= '<div style="border:1px solid red;">';

  foreach ($query_avatar as $key => $value) {
    $title = $value->title;
    $as = $value->name;
    $tax_name[$value->field_avatar_type_tid] = $value->name;
    $tax_name[$value->field_avatar_type_tid] = $value->name;
    $avatar_name[$value->field_avatar_type_tid][] = $value->entity_id;
  }

  foreach ($tax_name as $key => $value) {
    $output .= '<div style="border:1px solid blue; float:left;margin-left:10px">'. $value . '</div>';
  }

  $form['checkboxes_fieldset'] = array(
    '#title' => t("Avatars"),
    '#prefix' => '<div id="checkboxes-div" class="accordionWrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#weight' => 11,
  );

  $form['checkboxes_fieldset']['description'] = array('#markup' => '<div>' . t('What kind of avatar do you want?').'</div>');
  $m=1;
  foreach ($tax_name as $key => $value) {
    $form['checkboxes_fieldset']['checkboxes_fieldset2'.$value] = array(
      '#title' => $value,
      '#prefix' => "<div id='checkboxes-div-$m' class='accordionItem'>",
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      '#weight' => 11,
    );$m++;
    $i=1;
    foreach ($avatar_name[$key] as $key1 => $value2) {
      $form['checkboxes_fieldset']['checkboxes_fieldset2'.$value]["avatar_checkbox-".$value2] = array(
        '#type' => 'radio',
        '#title' => pl_avatar_title($value2),
        '#prefix' => "<div class='avatar_radio ar-$i'>",
        '#suffix' => '</div>',
        '#attributes' => array(
          'class' => array('av_radio')
        )
      );$i++;
    }
  }

  array_unshift($form['#submit'], 'submit_for_avatar');
}

// function for grouplead avatar mage.
function play_library_custom_form_profile2_edit_group_lead_form_alter(&$form, $form_state) {
  $form['profile_group_lead']['field_user_avatar'] = array('#attributes' => array('style' => 'display:none'));

  $query = db_select('field_data_field_avatar_type','type');
  $query->fields('type',array('field_avatar_type_tid','entity_id'));
  $query->join('eck_avatar','eck','eck.id = type.entity_id');
  $query->join('taxonomy_term_data','tax','tax.tid = type.field_avatar_type_tid');
  $query->fields('tax',array('name'));
  $query->fields('eck',array('title'));
  $query_avatar = $query->execute()->fetchAll();

  $output = '';
  $output .= '<div style="border:1px solid red;">';

  foreach ($query_avatar as $key => $value) {
    $title = $value->title;
    $as = $value->name;
    $tax_name[$value->field_avatar_type_tid] = $value->name;
    $tax_name[$value->field_avatar_type_tid] = $value->name;
    $avatar_name[$value->field_avatar_type_tid][] = $value->entity_id;
  }

  foreach ($tax_name as $key => $value) {
    $output .= '<div style="border:1px solid blue; float:left;margin-left:10px">'. $value . '</div>';
  }

  $form['checkboxes_fieldset'] = array(
    '#title' => t("Avatars"),
    '#prefix' => '<div id="checkboxes-div" class="accordionWrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#weight' => 11,
  );

  $form['checkboxes_fieldset']['description'] = array('#markup' => '<div>' . t('What kind of avatar do you want?').'</div>');
  $m=1;
  foreach ($tax_name as $key => $value) {
    $form['checkboxes_fieldset']['checkboxes_fieldset2'.$value] = array(
      '#title' => $value,
      '#prefix' => "<div id='checkboxes-div-$m' class='accordionItem'>",
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      '#weight' => 11,
    );$m++;
    $i=1;
    foreach ($avatar_name[$key] as $key1 => $value2) {
      $form['checkboxes_fieldset']['checkboxes_fieldset2'.$value]["avatar_checkbox-".$value2] = array(
        '#type' => 'radio',
        '#title' => pl_avatar_title($value2),
        '#prefix' => "<div class='avatar_radio ar-$i'>",
        '#suffix' => '</div>',
        '#attributes' => array(
          'class' => array('av_radio')
        )
      );$i++;
    }
  }

  array_unshift($form['#submit'], 'submit_for_avatar');
}

// function for staff avatar image.

function play_library_custom_form_profile2_edit_staff_registration_form_alter(&$form, $form_state) {
  $form['profile_staff_registration']['field_user_avatar'] = array('#attributes' => array('style' => 'display:none'));

  $query = db_select('field_data_field_avatar_type','type');
  $query->fields('type',array('field_avatar_type_tid','entity_id'));
  $query->join('eck_avatar','eck','eck.id = type.entity_id');
  $query->join('taxonomy_term_data','tax','tax.tid = type.field_avatar_type_tid');
  $query->fields('tax',array('name'));
  $query->fields('eck',array('title'));
  $query_avatar = $query->execute()->fetchAll();

  $output = '';
  $output .= '<div style="border:1px solid red;">';

  foreach ($query_avatar as $key => $value) {
    $title = $value->title;
    $as = $value->name;
    $tax_name[$value->field_avatar_type_tid] = $value->name;
    $tax_name[$value->field_avatar_type_tid] = $value->name;
    $avatar_name[$value->field_avatar_type_tid][] = $value->entity_id;
  }

  foreach ($tax_name as $key => $value) {
    $output .= '<div style="border:1px solid blue; float:left;margin-left:10px">'. $value . '</div>';
  }

  $form['checkboxes_fieldset'] = array(
    '#title' => t("Avatars"),
    '#prefix' => '<div id="checkboxes-div" class="accordionWrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
    '#weight' => 11,
  );

  $form['checkboxes_fieldset']['description'] = array('#markup' => '<div>' . t('What kind of avatar do you want?').'</div>');
  $m=1;
  foreach ($tax_name as $key => $value) {
    $form['checkboxes_fieldset']['checkboxes_fieldset2'.$value] = array(
      '#title' => $value,
      '#prefix' => "<div id='checkboxes-div-$m' class='accordionItem'>",
      '#suffix' => '</div>',
      '#type' => 'fieldset',
      '#weight' => 11,
    );$m++;
    $i=1;
    foreach ($avatar_name[$key] as $key1 => $value2) {
      $form['checkboxes_fieldset']['checkboxes_fieldset2'.$value]["avatar_checkbox-".$value2] = array(
        '#type' => 'radio',
        '#title' => pl_avatar_title($value2),
        '#prefix' => "<div class='avatar_radio ar-$i'>",
        '#suffix' => '</div>',
        '#attributes' => array(
          'class' => array('av_radio')
        )
      );$i++;
    }
  }

  array_unshift($form['#submit'], 'submit_for_avatar');
}




// function to get avatar images
function avatar_images_list($value) {

  $query = db_select('field_data_field_avatar_image', 't');
  $query->join('file_managed', 'n', 'n.fid = t.field_avatar_image_fid');

  $result = $query
    ->fields('n', array('uri'))
    ->condition('t.entity_id', $value)
    ->execute()
    ->fetchAssoc();

  $img_uri_path = $result['uri'];
  $style = 'avatar_style';
  $img_path = image_style_url($style, $img_uri_path);
  $img = "<img src='$img_path'>";

  return $img;
}

function pl_avatar_title($id) {
  $query = db_select('eck_avatar','avt');
  $query->fields('avt', array('title'));
  $query->condition('id',$id);
  $result = $query->execute()->fetchAssoc();

  return $result['title'];
}

// submit handler for user avatar
function submit_for_avatar($form, $form_state) {

  foreach ($form_state['values'] as $key => $value) {
    if($value === 'on'){
      $avatar_entity = 'avatar_checkbox-';
      $av_entity_id = strpos($key, $avatar_entity);

      if ($av_entity_id !== false) {
        // use sesion to pass avatar ID to profile presave hook.
        $_SESSION['user_avatar_id'] = substr($key, 16);
        break;
      }
    }
  }
}

/**
 * Implementation of hook_profile2_presave()
 */
function play_library_custom_profile2_presave($profile) {

  if (isset($_SESSION['user_avatar_id'])){
    $profile->field_user_avatar[LANGUAGE_NONE][0]['target_id'] = $_SESSION['user_avatar_id'];
    unset($_SESSION['user_avatar_id']);
  }
}

function pl_leaderblock_dashboard() {

  $nonSelf = variable_get('nonself_activities_progress');
  $self = variable_get('activities_progress');

  $progressActi = array_merge($self, $nonSelf);

  $query = db_select('field_data_field_activity_entry_activity','entry');
  $query->fields('entry', array('field_activity_entry_activity_target_id', 'entity_id'));
  $query->condition('entry.field_activity_entry_activity_target_id', $progressActi);
  $query->join('eck_activity','act','act.id = entry.entity_id');
  $query->join('users','u','u.uid = act.uid');
  $query->fields('act', array('uid'));
  $query->fields('u', array('name'));
  $query->addExpression('COUNT(act.id)', 'count');
  $query->groupby('act.uid');
  $query->orderBy('count','desc');
  $query->range(0, 5);
  $res = $query->execute()->fetchAll();

  foreach ($res as $key => $value) {
    $username .= "<div class = 'name'>".$value->name."</div><div class = 'count'>".$value->count.' stamps</div>';
  }
  $link = '<a href = "#">More </a>';
  return $username.$count.$link;
}

/**
 * Function callback for library Program logo image
 */
function pl_program_logo_image() {

  //Program image fid
  $imgFid = variable_get('pmc_progrm_image');

  if ($imgFid != 0) {

    //Getting Image status
    $queryFile = db_select('file_managed','fm');
    $queryFile->fields('fm', array('status'));
    $queryFile->condition('fid',$imgFid);
    $result = $queryFile->execute()->fetchAssoc();

    $status = $result['status'];

    //Update Image status
    if($status != 1) {
      $query = db_update('file_managed')
      ->fields(array('status' => 1))
      ->condition('fid',$imgFid)
      ->execute();
    }

    //Image for Library Program
    $file = file_load($imgFid);
    $uri = $file->uri;
    $urlImg = file_create_url($uri);
    $imageCompleted = "<img src='$urlImg'>";

    return $imageCompleted;
  }
}

/**
 * Function callback for library Program footer content
 */
function pl_program_footer_content() {

  $program_footer = variable_get('pmc_program_footer', array('value' => '', 'format' => NULL));



  return $program_footer['value'];
}
