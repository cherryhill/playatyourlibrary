<?php




/**
*Implement hook permissions
**/
function play_progress_calendar_permission() {
  return array(
    'view progress page' => array(
      'title' => t('View Calendar Progress Page'),
      'description' => t('Access to view Calendar Progress Page'),
    ),
    'view_activity_record_for_patron' => array(
      'title' => t('Access activity record page'),
      'description' => t('Access activity record page'),
    ),
  );
  
}



// children progress page on mobile.
function play_progress_calendar_init() {
  global $user;
  $current_time = time();
  $current_date = date('Y-m-d', $current_time);
  
  $setting = array('play_progress_calendar' => array('currentUser' => $user->uid, 'currentDate' => $current_date));
  drupal_add_js($setting, 'setting');
  
}
/**
 * Implements hook_menu().
 */

function play_progress_calendar_menu() {

  $items['calendar'] = array(
    'title' => 'Calendar Page',
    'page callback' => 'calendar_page',
    'access arguments' => array('access content'),
    // 'type' => MENU_NORMAL_ITEM,
  );

  $items['progress'] = array(
    'title' => 'Progress',
    'page callback' => 'play_progress_calendar',
    'access arguments' => array('view progress page'),
    // 'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/play_progress_calendar_page.inc',
    'file path' => drupal_get_path('module', 'play_progress_calendar'),
  );
  $items['calendar2'] = array(
    'title' => 'calendar data',
    'page callback' => 'calendar_data2',
    'access arguments' => array('access content'),
    // 'type' => MENU_NORMAL_ITEM,
  );
  $items['rewardloader'] = array(
    'title' => 'reward data',
    'page callback' => 'reward_loader',
    'access arguments' => array('access content'),
    // 'type' => MENU_NORMAL_ITEM,
  );
  $items['record-activity'] = array(
    'title' => 'Record Activity for Patron',
    'page callback' => 'show_activity_reward_forms',
    'page arguments' => array(1),
    'access arguments' => array('view_activity_record_for_patron'),
    'type' => MENU_CALLBACK,
  );

  $items['update-reward-pickup'] = array(
    'title' => 'Reward pick up',
    'page callback' => '_play_progress_calendar_update_rew_pickup',
    'access arguments' => array('access content'),
    // 'type' => MENU_NORMAL_ITEM,
  );
  
  
  return $items;
}








/**
 * Implements hook_theme for making tpl file for children progress page.
 */

 function play_progress_calendar_theme($existing, $type, $theme, $path) {
  $themes = array(
    'play_progress_calendar_page' => array(
      'template' => 'templates/play-progress-calendar',
      'variable' => array(),
    ),
  );

  return $themes;
}




/**
 * This is for calendar ajax callback function. Called when user drags and drops a sticker
 */

function calendar_page() {

  $activity_list = explode(',', $_REQUEST['act_ids']);
  //Check if request contains a sticker id for external drop to create new activity
  if (strtotime($_REQUEST['drop_date']) <= time()){
    if (isset($_REQUEST['tid'])){ 
      //Create activity entry for all activities associated
      foreach ($activity_list as $activity) {
        play_library_program_create_activity_entry($activity , $_REQUEST['user_id'], strtotime($_REQUEST['drop_date']), $_REQUEST['tid']);
      }
    }
    //if activity id is present in post update activity for internal drop
    if (isset($_REQUEST['entry_id'])){
      //Update activity entry for all activities associated
      foreach ($activity_list as $activity) {
        play_library_program_update_activity_entry($_REQUEST['entry_id'], strtotime($_REQUEST['drop_date']),$_REQUEST['user_id'], $activity);
      }
    }
  }
  else{
    drupal_set_message(t('Please drop sticker for todays date or past dates'),'warning');
  }
  
  $req_points = play_library_program_next_close_reward_points($activity_list);

  if($req_points == 1) {
     $next_rew = t('<strong>'.$req_points.'</strong> more day of reading needed to receive your next prize');
  }

  else if ($req_points > 1){
      $next_rew = t('<strong>'.$req_points.'</strong> more days of reading needed to receive your next prize');
  } 
  
  else {
    $next_rew =  t('Congratulations! You have finished the Kidsâ€™ Summer Reading Program.'); 
  }
  //Print message que from drupal_set_message
  echo json_encode(array('next_reward'=>$next_rew, 'drupal_message'=>(theme('status_messages')))); 
}

//Function to generate json data on calendar load
function calendar_data2() {
    global $user;
    $uid = $user->uid;
    if (isset($_REQUEST)){
      $activity_list = explode(',', $_REQUEST['act_ids']);
      $start_date = strtotime($_REQUEST['start']);
      $end_date = strtotime($_REQUEST['end']);
    }
    //Get Activity count till start date
    $quer = db_select('eck_activity', 'eck_a');
    $quer->LEFTJOIN ('field_data_field_activity_entry_activity' , 'fdfae' , 'fdfae.entity_id = eck_a.id');
    // $quer->LEFTJOIN ('field_data_field_rw_claim_id' , 'fdrw' , 'fdrw.entity_id = eck_a.id');
    // $que->JOIN ('field_data_field_activity_fired_hook', 'hook', 'hook.entity_id = fdfae.field_activity_entry_activity_target_id');
    // $quer->LEFTJOIN('field_data_field_calendar_sticker_id', 'fds', 'fds.entity_id = eck_a.id');
    $quer->condition('eck_a.uid', $uid);
    $quer->condition('fdfae.field_activity_entry_activity_target_id', $activity_list, 'IN');
    $quer->condition('eck_a.created', $start_date, '<');
    $quer->fields('eck_a', array('id','title','created'));
    $quer->orderBy('eck_a.created','ASC');
    $resu = $quer->execute()->fetchAll();
    $day_count = count($resu);//->count();

    //Get Activity list btw start and end dates of Calendar
    $que = db_select('eck_activity', 'eck_a');
    $que->LEFTJOIN ('field_data_field_activity_entry_activity' , 'fdfae' , 'fdfae.entity_id = eck_a.id');
    $que->LEFTJOIN ('field_data_field_rw_claim_id' , 'fdrw' , 'fdrw.entity_id = eck_a.id');
    $que->LEFTJOIN('field_data_field_calendar_sticker_id', 'fds', 'fds.entity_id = eck_a.id');
    $que->condition('eck_a.uid', $uid);
    $que->condition('fdfae.field_activity_entry_activity_target_id', $activity_list, 'IN');
    $que->condition('eck_a.created', array($start_date, $end_date), 'BETWEEN');
    $que->fields('eck_a', array('id','title','created'));
    $que->fields('fds', array('field_calendar_sticker_id_tid'));
    $que->fields('fdrw', array('field_rw_claim_id_value'));
    $que->orderBy('eck_a.created','ASC');
    $res = $que->execute()->fetchAll();

    //Create json array
    foreach ($res as $key => $value) {
        $day_count = $day_count+1;
        //logic for days and day read
        if($day_count==1){
            $days_read = t($day_count . ' day read'); 
        } else{
            $days_read = t($day_count . ' days read');
        }
        // //Get URLs of stickers
        // if($value->field_calendar_sticker_id_tid){
        //   $sticker_tid = $value->field_calendar_sticker_id_tid;
        //   //get image URL only if not loaded previously
        //   if (!array_key_exists($sticker_tid, $external_url)){
        //     $term = taxonomy_term_load($value->field_calendar_sticker_id_tid);
        //     if ($image_items = field_get_items('taxonomy_term', $term, 'field_cal_sticker_image')) {
        //         $uri = $image_items[0]['uri'];
        //         $external_urls[$sticker_tid] = file_create_url($uri);
        //         // echo ($sticker_tid);
        //     }
        //   }
        // }

        //Print congratulations message and add reward-won class if user has won a prize
        if($value->field_rw_claim_id_value <> null){
         $days_read = t('<span class="cong-message"><strong>Congratulations!</strong></span><br/> <span class="msg">You have won a reward</span>');
         $class = 'reward-won';
        }
        //Add day-read class for all non prize days
        else{
          $class = 'day-read'; 
        }
        //create events array
        $events[] = array(
                      'id'=> $value->id,
                      'class' => $class,
                      // 'title'=>$value->title,//substr($value->title, 0, -20),
                      'imageurl_id' => $value->field_calendar_sticker_id_tid,//$external_urls[$sticker_tid],
                      'read_days'=>$days_read,
                      'start'=>date('Y-m-d', $value->created)
                      );
    }
    unset($_REQUEST);
    //Encode json data for calendar
    echo json_encode($events);
}



function show_activity_reward_forms() {
  $build = array();
  $build['form1'] = drupal_get_form('patron_activity_record_form');
  $build['form2'] = drupal_get_form('patron_reward_pickup_form');

  return drupal_render($build);
}




/**
*  Patron Activity Record form build is is for activity_record page.
*/

function patron_activity_record_form($form, &$form_state) {
  $qry = db_select('eck_activity', 'eck_a');
    $qry->join('field_data_field_activity_fired_hook', 'fdfafh', 'fdfafh.entity_id = eck_a.id');
    $qry->condition('fdfafh.field_activity_fired_hook_value', 'progress_page');
    $qry->fields('eck_a', array('title','id'));
    $resu = $qry->execute()->fetchAll();
    foreach ($resu as $value) {
      //$activity_id[] = $value->id; 
      $activity_title[$value->id] = $value->title; 
    }

  $form['username'] = array(
    '#title' => t('Username'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'user/autocomplete',
    '#attributes' => array(
    'placeholder' => t('Username'),
    '#required'=> TRUE,
    ),
  );
          
  $form['html'] = array(
   '#type' => 'markup',
   '#markup' => '<div>Search for patrons here: <a href="patron-list" target="popup" onclick="window.open(&quot; patron-list &quot;, &quot; Patron List&quot; ,&quot; width=1000  height=400 &quot;)">Patron list</a></div>',
  );
  $form['activity'] = array(
    '#type' => 'select',
    '#options' => $activity_title,
  );
  $form['from'] = array(
    '#title' => t('From'),
    '#type' => 'date_popup',
    '#date_format' => 'F d, Y',
    '#date_year_range' => '0:+10',
    '#datepicker_options' => array('maxDate' => '+0D'),
    '#required' => TRUE,
    '#editable' =>'false',
    '#size' => 8,
  );
  $form['to'] = array(
    '#title' => t('To'),
    '#type' => 'date_popup',
    '#date_format' => 'F d, Y',
    '#date_year_range' => '0:+10',
    '#datepicker_options' => array('maxDate' => '+0D'),
    '#required' => TRUE,
    '#editable' =>'false',
    '#size' => 8,
   );
  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
    // 'callback'=>'patron_activity_record_form_record'
    // '#attributes' => array('id'=>array('activity-submit')),
    // '#ajax' => array(
    //     'callback' => 'patron_activity_record_form_record',
    //     'wrapper' => 'bingo-progress-main',
    //     'method' => 'replace',
    //     'effect' => 'fade',
    //   ),
  );

  

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'play_progress_calendar') . '/js/record_activity.js',
  );

  return $form;
}

function patron_activity_record_form_submit($form, &$form_state) {
  $username = $form_state['values']['username'];

  $query = db_select('users', 'u');
  $query->condition('u.name', $username);
  $query->fields('u', array('uid'));
  $user_uid = $query->execute()->fetchField();
   
  $activity_id = $form_state['values']['activity'];
  $activity_title = $form_state['complete form']['activity']['#options'][$activity_id];
  // $activity_title = 
  $from = strtotime($form_state['values']['from']);
  $to = strtotime($form_state['values']['to']);

  //Get any staff sticker tid
  $vocabulary = taxonomy_vocabulary_machine_name_load('calendar_sticker');
  $tree = taxonomy_get_tree($vocabulary->vid);
  foreach ($tree as $term) { 
    $image = taxonomy_term_load($term->tid);
    $staff_sticker_field = field_get_items('taxonomy_term', $image, 'field_staff_record_image');
    $staff_sticker_flag = $staff_sticker_field[0]['value'];
    if($staff_sticker_flag == 1){
      $sticker_tid = $term->tid;
    }
  }
  $sticker_tid = 102;
  if(isset($sticker_tid)){
    for ($i=$from; $i<=$to; $i+=86400) {
      $date = date("m-d-Y", $i);
      // $tid = 47;
       $status = play_library_program_create_activity_entry($activity_id , $user_uid, $i, $sticker_tid);
       if($status){
        drupal_set_message(t("Recorded $activity_title activity for $date for user $username"), 'status');
       }
       // drupal_set_message('You have entered the read on a day activity.');
    }
  } else {
    drupal_set_message("Please add stickers for Calendar with 'Staff Record Image' as 'Yes'", "error");
  }
  // $commands = array();
  // $commands[] = ajax_command_remove('.messages');
  // $commands[] = ajax_command_after('.l-header', theme('status_messages'));
  
  // drupal_set_message("yes");
  $_SESSION['user_uid'] = $user_uid;

  // return array(
  //   '#type' => 'ajax',
  //   '#commands' => $commands,
  // );

  //Retain submitted field values
  $form_state['rebuild'] = TRUE;

}



function patron_reward_pickup_form($form, &$form_state) {
  //get patron name from session 

  $patron_name = user_load($_SESSION['user_uid'])->name;
  
  //get reward list

  $subqry = db_select('field_data_field_type_of_reward_raffle_priz', 'rew_type');
  $subqry->condition('rew_type.field_type_of_reward_raffle_priz_tid', 1);
  $subqry->fields('rew_type', array('entity_id'));
  $physical_rewids = $subqry->execute()->fetchAll();
  foreach ($physical_rewids as $key => $value) {
    $rew_ids[]= $value->entity_id;
  }
  // print_r($rew_ids);die();

  $qry = db_select('eck_reward', 'eck_r');
  //join all required tables
  $qry->LEFTJOIN('field_data_field_reward_claim_id', 'fdfrci', 'fdfrci.entity_id=eck_r.id');
  $qry->LEFTJOIN('field_data_field_staff_user', 'fdfsu', 'fdfsu.entity_id=eck_r.id');
  $qry->LEFTJOIN('field_data_field_staff_notes', 'fdfsn', 'fdfsn.entity_id=eck_r.id'); 
  $qry->LEFTJOIN('field_data_field_rf_pickup_date', 'fdfrpd', 'fdfrpd.entity_id=eck_r.id');
  $qry->LEFTJOIN('field_data_field_receieving_status', 'fdfrs', 'fdfrs.entity_id=eck_r.id');

  //Add required condition
  $qry->condition('eck_r.type', 'reward_claim');
  $qry->condition('eck_r.uid', $_SESSION['user_uid'] );
  $qry->condition('fdfrci.field_reward_claim_id_target_id', $rew_ids, 'IN');
  
  //Get required field values
  $qry->fields('eck_r', array('title','id', 'created'));
  $qry->fields('fdfsu', array('field_staff_user_value'));
  $qry->fields('fdfsn', array('field_staff_notes_value'));
  $qry->fields('fdfrpd', array('field_rf_pickup_date_value'));
  $qry->fields('fdfrs', array('field_receieving_status_value'));

  $Reward_set = $qry->execute()->fetchAll();
  // echo'<pre>';print_r($Reward_set);//die();
  // foreach ($resu as $value) {
  //   //$activity_id[] = $value->id; 
  //   $Reward_set[$value->id] = $value->id;
  //   $Reward_set[$value->id]['title'] = $value->title;
  //   $Reward_set[$value->id]['staff'] = $value->field_staff_user_value;
  //   $Reward_set[$value->id]['notes'] = $value->field_staff_notes_value;
  //   $Reward_set[$value->id]['pick_up_date'] = $value->field_rf_pickup_date_value;
  //   $Reward_set[$value->id]['rcv_status'] = $value->field_receieving_status_value;
  // }


  $form['title'] = array(
      '#type' => 'markup',
      '#markup' => '<div><h2>'.t('Record Prize Pickup for '). $patron_name .'</h2></div>',
      );


  $form['reward'] = array(
    '#prefix' => '<div id="people">',
    '#suffix' => '</div>',
    '#tree' => TRUE,
    '#theme' => 'table',
    '#header' => array(t('Reward'), t('Staff'), t('Staff Notes'), t('Pickup Date'),t('Received'), t('Action')),
    '#rows' => array(),
  );

  foreach ($Reward_set as $value) {
    
      $reward_title = array(
      '#id' => 'reward-'.$value->id,
      '#type' => 'markup',
      '#markup' => $value->title,
        );

      $reward_staff = array(
      '#id' => 'staff-'.$value->id,
      '#type' => 'markup',
      '#markup' => $value->field_staff_user_value,
      );

    //Show input boxes only for non received rewards
    if(empty($value->field_staff_user_value)){
      $reward_staff_notes = array(
      '#id' => 'staff-notes-'.$value->id,
      '#type' => 'textfield',
      '#default_value' => $value->field_staff_notes_value,
      );

      $reward_pickup_date = array(
      '#type' => 'date_popup',
      '#date_format' => 'F d, Y',
      '#date_year_range' => '0:+10',
      '#datepicker_options' => array('maxDate' => '+0D'),
      '#required' => TRUE,
      '#editable' =>'false',
      '#size' => 8,
      '#id' => 'staff-date-'.$value->id,
      '#default_value' => date('m-d-Y', $value->field_rf_pickup_date_value),
      );

       if ($value->field_receieving_status_value){
        $reward_status = array(
          '#type' => 'markup',
          '#markup' => 'Yes',
        );
      } else{
        $reward_status = array(
          '#type' => 'markup',
          '#markup' => 'No',
        );
      }
    
      $reward_submit = array(
      '#id' => $value->id,
      '#value' => 'Submit',
      '#type' => 'button',
      '#attributes' => array('class'=> array('update-rew')));
      // '#attributes' => array('id'=>array('activity-submit')),
      // '#ajax' => array(
      //     'callback' => 'patron_activity_record_form_record',
      //     'wrapper' => 'bingo-progress-main',
      //     'method' => 'replace',
      //     'effect' => 'fade',
      //   ),
    }

    else{
      
      $reward_staff_notes = array(
        '#type' => 'markup',
        '#markup' => $value->field_staff_notes_value,
      );

      $reward_pickup_date = array(
        '#type' => 'markup',
        '#markup' => date('m-d-Y',strtotime($value->field_rf_pickup_date_value)),
      );

      if ($value->field_receieving_status_value){
        $reward_status = array(
          '#type' => 'markup',
          '#markup' => 'Yes',
        );
      } else{
        $reward_status = array(
          '#type' => 'markup',
          '#markup' => 'No',
        );
      }
      


    }
      
      $form['reward'][] = array(
        'title' => &$reward_title,
        'staff' => &$reward_staff,
        'notes' => &$reward_staff_notes,
        'pick up date' => &$reward_pickup_date,
        'status' => &$reward_status, 
        'submit' =>  &$reward_submit,
      );

      $form['reward']['#rows'][] = array(
        array('data' => &$reward_title),
        array('data' => &$reward_staff),
        array('data' => &$reward_staff_notes),
        array('data' => &$reward_pickup_date),
        array('data' => &$reward_status),
        array('data' => &$reward_submit),
      );
      unset($reward_title);
      unset($reward_staff);
      unset($reward_staff_notes);
      unset($reward_pickup_date);
      unset($reward_status);
      unset($reward_submit);  

  }
  // unset($SESSION['user_uid']);

  // $form['#attached']['js'] = array(
  //   drupal_get_path('module', 'play_progress_calendar') . '/js/record_activity.js',
  // );

  return $form;
}


//Function to update reward pickup details
function _play_progress_calendar_update_rew_pickup(){
  //Get username of user who is updating 
  global $user;
  $staff_name = $user->name;

  //Get field values
  $rew_id =  $_REQUEST['reward-id'];
  $staff_notes = $_REQUEST['staff-notes'];
  $rew_pickup_date = $_REQUEST['pickup-date'];
  $received_status = $_REQUEST['pickup-status'];

  $rewards = entity_load('reward', array($rew_id));
  $reward = reset($rewards);

  $lang = field_language('reward',$reward);
  foreach ($lang as $key => $value) {
    ${$key} = $value;
  }


  $reward->field_staff_user[$field_staff_user][0]['value'] = $staff_name;
  $reward->field_staff_notes[$field_staff_notes][0]['value'] = $staff_notes;
  $reward->field_rf_pickup_date[$field_rf_pickup_date][0]['value'] = date('Y-m-d h:i:s',strtotime($rew_pickup_date));
  $reward->field_receieving_status[$field_receieving_status][0]['value'] = 1;//$received_status;
  field_attach_update('reward', $reward);
  // unset($reward);
  // echo json_encode($reward);
  echo "success"; 
  
  // $activityUpdate = reset($activityUpdates);
  // //Get languauge code for activities
  // $lang = field_language('activity',$activityUpdate);
  // foreach ($lang as $key => $value) {
  //   ${$key} = $value;
  // }

  // $activityUpdate->field_rw_claim_id[$field_rw_claim_id][0]['value'] = $reward_id;
  // $activityUpdate->field_progress_info[$field_progress_info][0]['value'] = t('Congratulations! You have earned a prize!');
  // field_attach_update('activity', $activityUpdate);
  // unset($activityEntry_id);

}