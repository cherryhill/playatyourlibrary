<?php




/**
*Implement hook permissions
**/
function play_progress_calendar_permission() {
  return array(
    'view progress page' => array(
      'title' => t('View Calendar Progress Page'),
      'description' => t('Access to view Calendar Progress Page'),
    ),
    'view_activity_record_for_patron' => array(
      'title' => t('Access activity record page'),
      'description' => t('Access activity record page'),
    ),
  );
  
}



// children progress page on mobile.
function play_progress_calendar_init() {
  global $user;
  $current_time = time();
  $current_date = date('Y-m-d', $current_time);
  
  $setting = array('play_progress_calendar' => array('currentUser' => $user->uid, 'currentDate' => $current_date));
  drupal_add_js($setting, 'setting');
  
}
/**
 * Implements hook_menu().
 */

function play_progress_calendar_menu() {

  $items['calendar'] = array(
    'title' => 'Calendar Page',
    'page callback' => 'calendar_page',
    'access arguments' => array('access content'),
    // 'type' => MENU_NORMAL_ITEM,
  );

  $items['progress'] = array(
    'title' => 'Progress',
    'page callback' => 'play_progress_calendar',
    'access arguments' => array('view progress page'),
    // 'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/play_progress_calendar_page.inc',
    'file path' => drupal_get_path('module', 'play_progress_calendar'),
  );
  $items['calendar2'] = array(
    'title' => 'calendar data',
    'page callback' => 'calendar_data2',
    'access arguments' => array('access content'),
    // 'type' => MENU_NORMAL_ITEM,
  );
  $items['rewardloader'] = array(
    'title' => 'reward data',
    'page callback' => 'reward_loader',
    'access arguments' => array('access content'),
    // 'type' => MENU_NORMAL_ITEM,
  );
  $items['record-activity'] = array(
    'title' => 'Record Activity for Patron',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('patron_activity_record_form'),
    'access arguments' => array('view_activity_record_for_patron'),
    'type' => MENU_CALLBACK,
  );
  
  
  return $items;
}


/**
 * Implements hook_theme for making tpl file for children progress page.
 */

 function play_progress_calendar_theme($existing, $type, $theme, $path) {
  $themes = array(
    'play_progress_calendar_page' => array(
      'template' => 'templates/play-progress-calendar',
      'variable' => array(),
    ),
  );

  return $themes;
}




/**
 * This is for calendar ajax callback function. Called when user drags and drops a sticker
 */

function calendar_page() {

  $activity_list = explode(',', $_REQUEST['act_ids']);
  //Check if request contains a sticker id for external drop to create new activity
  if (strtotime($_REQUEST['drop_date']) <= time()){
    if (isset($_REQUEST['tid'])){ 
      //Create activity entry for all activities associated
      foreach ($activity_list as $activity) {
        play_library_program_create_activity_entry($activity , $_REQUEST['user_id'], strtotime($_REQUEST['drop_date']), $_REQUEST['tid']);
      }
    }
    //if activity id is present in post update activity for internal drop
    if (isset($_REQUEST['entry_id'])){
      //Update activity entry for all activities associated
      foreach ($activity_list as $activity) {
        play_library_program_update_activity_entry($_REQUEST['entry_id'], strtotime($_REQUEST['drop_date']),$_REQUEST['user_id'], $activity);
      }
    }
  }
  else{
    drupal_set_message(t('Please drop sticker for todays date or past dates'),'warning');
  }
  
  $req_points = play_library_program_next_close_reward_points($activity_list);

  if($req_points == 1) {
     $next_rew = t('<strong>'.$req_points.'</strong> more day of reading needed to receive your next prize');
  }

  else if ($req_points > 1){
      $next_rew = t('<strong>'.$req_points.'</strong> more days of reading needed to receive your next prize');
  } 
  
  else {
    $next_rew =  t('Congratulations! You have finished the Kidsâ€™ Summer Reading Program.'); 
  }
  //Print message que from drupal_set_message
  echo json_encode(array('next_reward'=>$next_rew, 'drupal_message'=>(theme('status_messages')))); 
}

//Function to generate json data on calendar load
function calendar_data2() {
    global $user;
    $uid = $user->uid;
    if (isset($_REQUEST)){
      $activity_list = explode(',', $_REQUEST['act_ids']);
      $start_date = strtotime($_REQUEST['start']);
      $end_date = strtotime($_REQUEST['end']);
    }
    //Get Activity count till start date
    $quer = db_select('eck_activity', 'eck_a');
    $quer->LEFTJOIN ('field_data_field_activity_entry_activity' , 'fdfae' , 'fdfae.entity_id = eck_a.id');
    // $quer->LEFTJOIN ('field_data_field_rw_claim_id' , 'fdrw' , 'fdrw.entity_id = eck_a.id');
    // $que->JOIN ('field_data_field_activity_fired_hook', 'hook', 'hook.entity_id = fdfae.field_activity_entry_activity_target_id');
    // $quer->LEFTJOIN('field_data_field_calendar_sticker_id', 'fds', 'fds.entity_id = eck_a.id');
    $quer->condition('eck_a.uid', $uid);
    $quer->condition('fdfae.field_activity_entry_activity_target_id', $activity_list, 'IN');
    $quer->condition('eck_a.created', $start_date, '<');
    $quer->fields('eck_a', array('id','title','created'));
    $quer->orderBy('eck_a.created','ASC');
    $resu = $quer->execute()->fetchAll();
    $day_count = count($resu);//->count();

    //Get Activity list btw start and end dates of Calendar
    $que = db_select('eck_activity', 'eck_a');
    $que->LEFTJOIN ('field_data_field_activity_entry_activity' , 'fdfae' , 'fdfae.entity_id = eck_a.id');
    $que->LEFTJOIN ('field_data_field_rw_claim_id' , 'fdrw' , 'fdrw.entity_id = eck_a.id');
    $que->LEFTJOIN('field_data_field_calendar_sticker_id', 'fds', 'fds.entity_id = eck_a.id');
    $que->condition('eck_a.uid', $uid);
    $que->condition('fdfae.field_activity_entry_activity_target_id', $activity_list, 'IN');
    $que->condition('eck_a.created', array($start_date, $end_date), 'BETWEEN');
    $que->fields('eck_a', array('id','title','created'));
    $que->fields('fds', array('field_calendar_sticker_id_tid'));
    $que->fields('fdrw', array('field_rw_claim_id_value'));
    $que->orderBy('eck_a.created','ASC');
    $res = $que->execute()->fetchAll();

    //Create json array
    foreach ($res as $key => $value) {
        $day_count = $day_count+1;
        //logic for days and day read
        if($day_count==1){
            $days_read = t($day_count . ' day read'); 
        } else{
            $days_read = t($day_count . ' days read');
        }
        // //Get URLs of stickers
        // if($value->field_calendar_sticker_id_tid){
        //   $sticker_tid = $value->field_calendar_sticker_id_tid;
        //   //get image URL only if not loaded previously
        //   if (!array_key_exists($sticker_tid, $external_url)){
        //     $term = taxonomy_term_load($value->field_calendar_sticker_id_tid);
        //     if ($image_items = field_get_items('taxonomy_term', $term, 'field_cal_sticker_image')) {
        //         $uri = $image_items[0]['uri'];
        //         $external_urls[$sticker_tid] = file_create_url($uri);
        //         // echo ($sticker_tid);
        //     }
        //   }
        // }

        //Print congratulations message and add reward-won class if user has won a prize
        if($value->field_rw_claim_id_value <> null){
         $days_read = t('<span class="cong-message"><strong>Congratulations!</strong></span><br/> <span class="msg">You have won a reward</span>');
         $class = 'reward-won';
        }
        //Add day-read class for all non prize days
        else{
          $class = 'day-read'; 
        }
        //create events array
        $events[] = array(
                      'id'=> $value->id,
                      'class' => $class,
                      // 'title'=>$value->title,//substr($value->title, 0, -20),
                      'imageurl_id' => $value->field_calendar_sticker_id_tid,//$external_urls[$sticker_tid],
                      'read_days'=>$days_read,
                      'start'=>date('Y-m-d', $value->created)
                      );
    }
    unset($_REQUEST);
    //Encode json data for calendar
    echo json_encode($events);
}




/**
*  Patron Activity Record form build is is for activity_record page.
*/

function patron_activity_record_form($form, &$form_state) {
  $qry = db_select('eck_activity', 'eck_a');
    $qry->join('field_data_field_activity_fired_hook', 'fdfafh', 'fdfafh.entity_id = eck_a.id');
    $qry->condition('fdfafh.field_activity_fired_hook_value', 'progress_page');
    $qry->fields('eck_a', array('title','id'));
    $resu = $qry->execute()->fetchAll();
    foreach ($resu as $value) {
      //$activity_id[] = $value->id; 
      $activity_title[$value->id] = $value->title; 
    }

  $form['username'] = array(
    '#title' => t('Username'),
    '#type' => 'textfield',
    '#autocomplete_path' => 'user/autocomplete',
    '#attributes' => array(
    'placeholder' => t('Username'),
    '#required'=> TRUE,
    ),
  );
          
  $form['html'] = array(
   '#type' => 'markup',
   '#markup' => '<div>Search for patrons here: <a href="patron-list" target="popup" onclick="window.open(&quot; patron-list &quot;, &quot; Patron List&quot; ,&quot; width=1000  height=400 &quot;)">Patron</a></div>',
  );
  $form['activity'] = array(
    '#type' => 'select',
    '#options' => $activity_title,
  );
  $form['from'] = array(
    '#title' => t('From'),
    '#type' => 'date_popup',
    '#date_format' => 'F d, Y',
    '#date_year_range' => '0:+10',
    '#datepicker_options' => array('maxDate' => '+0D'),
    '#required' => TRUE,
    '#editable' =>'false',
    '#size' => 8,
  );
  $form['to'] = array(
    '#title' => t('To'),
    '#type' => 'date_popup',
    '#date_format' => 'F d, Y',
    '#date_year_range' => '0:+10',
    '#datepicker_options' => array('maxDate' => '+0D'),
    '#required' => TRUE,
    '#editable' =>'false',
    '#size' => 8,
   );
  $form['submit'] = array(
    '#value' => 'Submit',
    '#type' => 'submit',
    // '#attributes' => array('id'=>array('activity-submit')),
    '#ajax' => array(
        'callback' => 'patron_activity_record_form_record',
        'wrapper' => 'bingo-progress-main',
        'method' => 'replace',
        'effect' => 'fade',
      ),
  );

  

  $form['#attached']['js'] = array(
    drupal_get_path('module', 'play_progress_calendar') . '/js/record_activity.js',
  );

  return $form;
}

function patron_activity_record_form_record($form, &$form_state) {
  $username = $form_state['values']['username'];

  $query = db_select('users', 'u');
  $query->condition('u.name', $username);
  $query->fields('u', array('uid'));
  $user_uid = $query->execute()->fetchField();
   
  $activity_id = $form_state['values']['activity'];
  $activity_title = $form_state['complete form']['activity']['#options'][$activity_id];
  // $activity_title = 
  $from = strtotime($form_state['values']['from']);
  $to = strtotime($form_state['values']['to']);

  //Get any staff sticker tid
  $vocabulary = taxonomy_vocabulary_machine_name_load('calendar_sticker');
  $tree = taxonomy_get_tree($vocabulary->vid);
  foreach ($tree as $term) { 
    $image = taxonomy_term_load($term->tid);
    $staff_sticker_field = field_get_items('taxonomy_term', $image, 'field_staff_record_image');
    $staff_sticker_flag = $staff_sticker_field[0]['value'];
    if($staff_sticker_flag == 1){
      $sticker_tid = $term->tid;
    }
  }
  $sticker_tid = 102;
  if(isset($sticker_tid)){
    for ($i=$from; $i<=$to; $i+=86400) {
      $date = date("m-d-Y", $i);
      // $tid = 47;
       $status = play_library_program_create_activity_entry($activity_id , $user_uid, $i, $sticker_tid);
       if($status){
        drupal_set_message(t("Recorded $activity_title activity for $date for user $username"), 'status');
       }
       // drupal_set_message('You have entered the read on a day activity.');
    }
  } else {
    drupal_set_message("Please add stickers for Calendar with 'Staff Record Image' as 'Yes'", "error");
  }
  $commands = array();
  $commands[] = ajax_command_remove('.messages');
  $commands[] = ajax_command_after('.l-header', theme('status_messages'));
  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}
