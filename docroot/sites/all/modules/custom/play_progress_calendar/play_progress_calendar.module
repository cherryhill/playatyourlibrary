<?php

/**
 * Implements hook_block(). . 
 */


function play_progress_calendar_block_info() {
  $block = array();
  
  $blocks['mobile_progress'] = array(
    'info' => t('Mobile Progress Report'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['mobile_sticker_count'] = array(
    'info' => t('Mobile Sticker count'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['calendar-data'] = array(
    'info' => t('Show calendar data json'),
    'cache' => DRUPAL_NO_CACHE,
    );
  $blocks['user_prize_block'] = array(
    'info' => t('User Progress Page Block'),
    'cache' => DRUPAL_NO_CACHE,
    );
  return $blocks;
}

function play_progress_calendar_block_view($block_name = '') {
  switch ($block_name) {
    case 'mobile_progress':
    $block['subject'] = '';
    $block['content'] = drupal_get_form('generate_mobile_progress_form');
    break;
    case 'mobile_sticker_count':
    $block['subject'] = '';
    $block['content'] = no_of_sticker_on_mobile();
    break;
    case 'calendar-data':
    $block['subject'] = '';
    $block['content'] = generate_json_data();
    break;
    case 'user_prize_block':
    $block['subject'] = '';
    $block['content'] = progress_user_block();
    break;                               
  }
  return $block;
}



// This is custom block shown the user progress of reading activity.


// children progress page on mobile.


function play_progress_calendar_init() {
  global $user;
  $current_time = time();
  $current_date = date('Y-m-d', $current_time);
  
  $setting = array('play_progress_calendar' => array('currentUser' => $user->uid, 'currentDate' => $current_date));
  drupal_add_js($setting, 'setting');
  
}
/**
 * Implements hook_menu().
 */

function play_progress_calendar_menu() {

  $items['calendar'] = array(
    'title' => 'Test Page',
    'page callback' => 'calendar_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['progress'] = array(
    'title' => 'Progress',
    'page callback' => 'play_progress_calendar',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'inc/play_progress_calendar_page.inc',
    'file path' => drupal_get_path('module', 'play_progress_calendar'),
  );
  $items['test'] = array(
    'title' => 'Test Menu',
    'page callback' => 'test',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['calendar2'] = array(
    'title' => 'calendar data',
    'page callback' => 'calendar_data2',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  
  return $items;
}


/**
 * Implements hook_theme for making tpl file for children progress page.
 */

 function play_progress_calendar_theme($existing, $type, $theme, $path) {
  $themes = array(
    'play_progress_calendar_page' => array(
      'template' => 'templates/play-progress-calendar',
      'variable' => array(),
    ),
  );

  return $themes;
}




/**
 * This is for calendar ajax functinality user drag and drop sticker and get point and reward.
 */

function calendar_page() {
  //Check if request contains a sticker id
  //print_r($_REQUEST);
if (strtotime($_REQUEST['drop_date']) <= time()){
  if (isset($_REQUEST['tid'])){
      //Get all activities to be recorded for dropped sticker
      $activity_list = explode(',', $_REQUEST['act_ids']); 
      //Create activity entry for all activities associated
      foreach ($activity_list as $activity) {
        play_library_program_create_activity_entry($activity , $_REQUEST['user_id'], strtotime($_REQUEST['drop_date']), $_REQUEST['tid']);
          // play_library_program_update_activity_entry(184, strtotime('11-AUG-2017'));
      }
  }

  if (isset($_REQUEST['entry_id'])){
      //Get all activities to be recorded for dropped sticker
      $activity_list = explode(',', $_REQUEST['act_ids']);
      //print_r($activity_list) ;
      //Create activity entry for all activities associated
      foreach ($activity_list as $activity) {
        // //print_r($_REQUEST['entry_id'].strtotime($_REQUEST['drop_date']));
        play_library_program_update_activity_entry($_REQUEST['entry_id'], strtotime($_REQUEST['drop_date']),$_REQUEST['user_id'], $activity);
          // play_library_program_update_activity_entry(184, strtotime('11-AUG-2017'));
      }
  }
}
else{
  drupal_set_message(t('Please drop sticker for todays date or past dates'),'warning');
}
  //Print message que from drupal_set_message
  echo (theme('status_messages')); 
}

//Function to generate json data on calendar load
function calendar_data2() {
    global $user;
    $uid = $user->uid;
    if (isset($_REQUEST)){
      $activity_list = explode(',', $_REQUEST['act_ids']);
      $start_date = strtotime($_REQUEST['start']);
      $end_date = strtotime($_REQUEST['end']);
    }
    //Get Activity count till start date
    $quer = db_select('eck_activity', 'eck_a');
    $quer->LEFTJOIN ('field_data_field_activity_entry_activity' , 'fdfae' , 'fdfae.entity_id = eck_a.id');
    $quer->LEFTJOIN ('field_data_field_rw_claim_id' , 'fdrw' , 'fdrw.entity_id = eck_a.id');
    //$que->JOIN ('field_data_field_activity_fired_hook', 'hook', 'hook.entity_id = fdfae.field_activity_entry_activity_target_id');
    $quer->LEFTJOIN('field_data_field_calendar_sticker_id', 'fds', 'fds.entity_id = eck_a.id');
    $quer->condition('eck_a.uid', $uid);
    $quer->condition('fdfae.field_activity_entry_activity_target_id', $activity_list, 'IN');
    $quer->condition('eck_a.created', $start_date, '<');
    $quer->fields('eck_a', array('id','title','created'));
    $quer->orderBy('eck_a.created','ASC');
    $resu = $quer->execute()->fetchAll();
    $day_count = count($resu);//->count();

    //Get Activity list btw start and end dates of Calendar
    $que = db_select('eck_activity', 'eck_a');
    $que->LEFTJOIN ('field_data_field_activity_entry_activity' , 'fdfae' , 'fdfae.entity_id = eck_a.id');
    $que->LEFTJOIN ('field_data_field_rw_claim_id' , 'fdrw' , 'fdrw.entity_id = eck_a.id');
    $que->LEFTJOIN('field_data_field_calendar_sticker_id', 'fds', 'fds.entity_id = eck_a.id');
    $que->condition('eck_a.uid', $uid);
    $que->condition('fdfae.field_activity_entry_activity_target_id', $activity_list, 'IN');
    $que->condition('eck_a.created', array($start_date, $end_date), 'BETWEEN');
    $que->fields('eck_a', array('id','title','created'));
    $que->fields('fds', array('field_calendar_sticker_id_tid'));
    $que->fields('fdrw', array('field_rw_claim_id_value'));
    $que->orderBy('eck_a.created','ASC');
    $res = $que->execute()->fetchAll();

    //Create json array
    foreach ($res as $key => $value) {
        $day_count = $day_count+1;
        //logic for days and day read
        if($day_count==1){
            $days_read = t($day_count . ' day read'); 
        } else{
            $days_read = t($day_count . ' days read');
        }
        //Get URLs of stickers
        if($value->field_calendar_sticker_id_tid){
            $term = taxonomy_term_load($value->field_calendar_sticker_id_tid);
            if ($image_items = field_get_items('taxonomy_term', $term, 'field_cal_sticker_image')) {
                $uri = $image_items[0]['uri'];
                $external_url = file_create_url($uri);
            }
        }
        //Print congratulations message and add reward-won class if user has won a prize
        if($value->field_rw_claim_id_value <> null){
         $days_read = t('<span class="cong-message">Congratulations!</span><br/> <span class="msg">You have won a reward</span>');
         $class = 'reward-won';
        }
        //Add day-read class for all non prize days
        else{
         $class = 'day-read'; 
        }
        //create events array
        $events[] = array(
                      'id'=> $value->id,
                      'class' => $class,
                      // 'title'=>$value->title,//substr($value->title, 0, -20),
                      'imageurl' => $external_url,
                      'read_days'=>$days_read,
                      'start'=>date('Y-m-d', $value->created)
                      );
    }
    unset($_REQUEST);
    //Encode json data for calendar
    echo json_encode($events);
}
