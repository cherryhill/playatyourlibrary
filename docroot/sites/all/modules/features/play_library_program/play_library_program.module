<?php
/**
 * @file
 * Code for the PLAY Library Program feature.
 */

include_once 'play_library_program.features.inc';

/**
 * function get field_language($entity_type, $entity, $field_name = NULL, $langcode = NULL);
 */
  
function get_entity_field_language($entity_type, $entity) {
  $field_language = field_language($entity_type, $entity);
  return $field_language;
}
/**
 * Implements hook_menu().
 */
function play_library_program_menu() {

  $items = array();

  $items['play-library-program/add/activity/%/%'] = array(
    'title' => 'Complete Activity',
    'page callback' => 'play_library_program_complete_activity',
    'page arguments' => array(3, 4),
    'access callback' => 'play_library_program_access_activity_entry',
    'access arguments' => array(3),
    'type' => MENU_CALLBACK,
  );

  $items['play-library-program/add/raffle_winner/%/%'] = array(
    'title' => 'Complete Activity',
    'page callback' => 'play_library_program_create_raffle_winner',
    'page arguments' => array(3, 4),
    'access callback' => 'user_access',
    'access arguments' => array('eck add raffle raffle_winner entities'),
    'type' => MENU_CALLBACK,
  );

  $items['testing-purposes'] = array(
    'title' => 'Reviews',
    'page callback' => 'pl_check_reward_validation',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form_alter()
 */
function play_library_program_form_alter(&$form, &$form_state, $form_id){
  if($form_id == 'eck__entity__form_edit_activity_activity' || $form_id == 'eck__entity__form_add_activity_activity'){
    $form['title']['#title'] = t('Name of Activity');
  }
}

/**
 * Access control to access activity entry creation.
 */
function play_library_program_access_activity_entry($activity_id) {
  
  global $language;
  //$lang = $language->language;

  global $user;
  $activities = entity_load('activity', array($activity_id));
  $activity = reset($activities);
  //get language codes for activity fields
  $lang = field_language('activity',$activity);
  foreach ($lang as $key => $value) {
  	${$key} = $value;
  }
   
  $points = intval($activity->field_activity_points[$field_activity_points][0]['value']);
  $daily_limit = FALSE;
  $current_participation_count = play_library_program_retrieve_activity_participation($activity_id, $user->uid);

  if ($current_participation_count > 0) {
    $last_entry = db_query("SELECT created FROM {eck_activity} WHERE uid = :uid ORDER BY created DESC LIMIT 1", array(':uid' => $user->uid))->fetchField();
    if ((time() - $activity->field_activity_time_limit[$field_activity_time_limit][0]['value']) < $last_entry) {
      return FALSE;
    }
  }

  if ($points > 0 && $current_participation_count <= $activity->field_activity_limit[$field_activity_limit][0]['value']) {
    return user_access('eck add activity activity_entry entities') || user_access('eck add activity entities') || user_access('eck add entities');
  }

  return FALSE;
}

/**
 *  Condition for activity frequecy limit;
 */
function play_library_program_frequency_limit($activity, $activity_time, $account_id) {

	global $language;
	// global $event_time;
	//get language code
	$lang = field_language('activity',$activity);
	foreach ($lang as $key => $value) {
		${$key} = $value;
	}

	$activity_id = $activity->id;
	$activity_title = $activity->title;
	$activity_requency_limit = $activity->field_activity_time_limit[$field_activity_time_limit][0]['value'];
	$start_time =$activity_time - $activity_requency_limit+1;
	$end_time = $activity_time + $activity_requency_limit-1;

	$arr = array($start_time,$end_time);

	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'activity');
	$query->entityCondition('bundle', 'activity_entry');
	$query->propertyCondition('uid', $account_id);
	$query->propertyCondition('created',$arr, 'BETWEEN');
	$query->fieldCondition('field_activity_entry_activity', 'target_id', $activity_id);
	$res = $query->count()->execute();

	if($res == 0) {    
	return TRUE;
	} else {
		drupal_set_message(t('You have already recorded '.$activity_title. ' for '.date('d-M-Y', $activity_time).'.'),'warning');
	return FALSE;
	}
}

/**
 * Condition for activity start date and end date;
 */
function play_library_program_activity_time_limit($activity, $activity_date) {
	global $language;
	//get language code
	$lang = field_language('activity',$activity);
	foreach ($lang as $key => $value) {
		${$key} = $value;
	}
	$activity_title = $activity->title;
	$activity_start_date = strtotime($activity->field_activity_start_date[$field_activity_start_date][0]['value']);
	$activity_end_date = strtotime($activity->field_activity_end_date[$field_activity_end_date][0]['value']);

	if($activity_start_date <= $activity_date && $activity_date <=  $activity_end_date) {
		return TRUE;
	} else {
		drupal_set_message(t('You cannot record this activity for the date <b>'. date('d-M-Y',$activity_date ). '</b> as participation for <b>'.$activity_title. '</b> is closed for this date'),'warning');
		return FALSE;
	}
} 
 
/**
 * Implements hook_block_info().
 */
function play_library_program_block_info() {

  $blocks = array();

  $blocks['activities'] = array(
    'info' => t('PLAY Program activities'),
    'cache' => DRUPAL_NO_CACHE
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function play_library_program_block_view($delta = '') {

  $block = array();

  if ($delta == 'activities') {
    $pending_activities = array();
    $completed_activities = array();
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'activity');
    $query->entityCondition('bundle', 'activity');
    $query->fieldCondition('field_activity_fired_hook', 'value', 'via_block');
    $result = $query->execute();

    foreach ($result as $entity_key => $entity_values) {
      if ($entity_key == 'activity') {
        foreach ($entity_values as $entity) {
          $activities = entity_load('activity', array($entity->id));
          $activity = reset($activities);
          if (play_library_program_access_activity_entry($entity->id)) {
            $pending_activities[] = l($activity->title, "play-library-program/add/activity/{$activity->id}/nojs");
          }
          else {
            $completed_activities[] = check_plain($activity->title);
          }
        }
      }
    }

    $block['subject'] = t('What did you do today?');
    $block['content'] = theme('play_library_program_activities_block', array('pending' => $pending_activities, 'completed' => $completed_activities));
    }

  return $block;
}

/**
 * Implements hook_field_widget_form_alter().
 */
function play_library_program_field_widget_form_alter(&$element, &$form_state, $context) {

  if (isset($element['value']['#field_name']) && $element['value']['#field_name'] == 'field_activity_fired_hook') {
    $options = array(
      'via_block' => t('- Select Firing Hook -'),
      'user_insert' => t(variable_get('user_insert')) ? t(variable_get('user_insert')) : t('User is Inserted'),
      'progress_page' => t('Record through progress report'),
    );

    // For now, only deal with nodes and other ECK content models.
    $entities = entity_get_info();

    foreach($entities as $entity_key => $entity) {
      if ($entity_key == 'node') {
        $entity['module'] = 'node';
      }

      if (isset($entity['module']) && ($entity['module'] == 'eck' || $entity['module'] == 'node')) {
        foreach ($entity['bundles'] as $bundle_key => $bundle_options) {
          if($entity_key == 'node' && $bundle_options['label'] == 'sticker') {
            $options["node_update|node|{$bundle_key}|updated"] = t("@value", array('@value' => variable_get($bundle_key))) ? t("@value", array('@value' => variable_get($bundle_key))) : t('Calender ');
          }

          if ($entity_key == 'node' && ($bundle_options['label'] == 'Booklist' || $bundle_options['label'] == 'Book Review' || $bundle_options['label'] == 'Movie Review' || $bundle_options['label'] == 'Video Game Review' || $bundle_options['label'] == 'Music Review' || $bundle_options['label'] == 'Activity Review')) {
            $options["node_update|node|{$bundle_key}|published"] = t("@value", array( '@value' => variable_get($bundle_key))) ? t("@value", array( '@value' => variable_get($bundle_key))) : t("@value", array( '@value' => $bundle_options['label']));
          }
        }
      }
    }

    if (module_exists('poll')) {
      $options["Poll answer submitted"] = t("@value", array( '@value' => variable_get('poll')));
    }

    if (module_exists('webform')) {
      $webforms = _play_library_program_get_webforms();
      foreach ($webforms as $webform) {
        $options["webform_submit|{$webform->nid}"] = t("@value", array( '@value' => variable_get($webform->nid))) ? t("@value", array( '@value' => variable_get($webform->nid))) : t("@value", array( '@value' => $webform->title));
      }
    }

    $element['value']['#type'] = 'select';
    $element['value']['#options'] = $options;
    $element['value']['#size'] = 0;
  }
}

/**
 * Implements hook_user_insert(). change
 */
function play_library_program_user_insert(&$edit, $account, $category) {
  $_SESSION['program_user_role_id']= $account->roles;

  global $language;
  $lang = $language->language;

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'activity');
  $query->entityCondition('bundle', 'activity');
  $query->fieldCondition('field_activity_fired_hook', 'value', 'user_insert');
  $result = $query->execute();
  
  // set user age in session to use in reward validation
  $_SESSION['user_birth_dt'] = strtotime($edit['profile_main']['field_user_birthday'][$lang][0]['value']);
  foreach ($result as $entity_key => $entity_values) {
    if ($entity_key == 'activity') {
      foreach ($entity_values as $entity) {
        play_library_program_create_activity_entry($entity->id, $account->uid);
      }
    }
  }
}

function play_library_program_node_presave($node) {
  
  if(function_exists('play_library_program_pl_is_program_active')){
    if(!pl_is_program_active()) {
      drupal_goto('home');
      return FALSE;
    }
  }
}

function play_library_program_webform_submission_presave($node, &$submission) {

  if(function_exists('play_library_program_pl_is_program_active')){
    if(!pl_is_program_active()) {
      drupal_goto('home');
      return FALSE;
    }
  }
}


/**
 * Implements hook_entity_insert().
 */
function play_library_program_entity_insert($entity, $type) { 

  if(function_exists('play_library_program_pl_is_program_active')){
    if(!pl_is_program_active()) {      
      return FALSE;
    } 
  }
   
  // Could be node, could be eck, could be something else, but easy to check.
  if (!isset($entity->type)) {
    return;
  }

  // Also hardcoding that we do not create *new* activity entries for an activity entry.
  if ($entity->type !== 'activity_entry') {
    _play_library_program_invoke_activity_entry_hooks($entity, $type);
  }

  if ($entity->type == 'reward') {
    pl_adding_taxonomy_term_for_reward($entity, $type);
  }

  if ($entity->type == 'activity_entry') {
    global $activityEntry_id;
    $activityEntry_id = $entity->id;
    _play_library_program_process_activity_entry($entity, $type);
  }

  if ($entity->type == 'reward_claim') {
    // _play_library_program_process_user_reward_claim($entity, $type);
  }
}


/**
 * Adding taxonomy term on adding of reward
 */
function pl_adding_taxonomy_term_for_reward($entity, $type){

  $r_id = $entity->id;

  $term = new stdClass();
  $term_load = taxonomy_vocabulary_machine_name_load('userpoints');
  $vid = $term_load->vid;
  $term->name = 'R_'.$r_id;
  $term->vid = $vid;
  taxonomy_term_save($term);

  drupal_set_message(t('term saved for reward'));
}

/**
 * List of reward ids associated with particular activity
 */
function pl_get_activity_reward_ids($activity_id, $account_uid = NULL){

  global $user;

  if(empty($account_uid)){
    $account = $user;
  } else {
    $account = user_load($account_uid);
  }

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type','reward');
  $query->entityCondition('bundle','reward');
  $query->fieldCondition('field_activities_reward', 'target_id', $activity_id);
  
  $result = $query->execute();

  foreach($result['reward'] as $reward){
    $rids[] = $reward->id;
  }
  return $rids;
}

/**
 * count of reward claimed by user
 */
function pl_receieved_rewards($account_uid, $reward_id){

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'reward');
  $query->entityCondition('bundle', 'reward_claim');
  $query->propertyCondition('uid', $account_uid);
  $query->fieldCondition('field_reward_claim_id', 'target_id', $reward_id);
  $result = $query->count()->execute();

  return $result;
}

function pl_reward_claim($reward_id, $account_uid, $category, $filters = NULL, $rf_drawing = NULL, $raffle_clm = NULL, $draw_time= NULL){

	global $activityEntry_id;

	if (empty($account_uid)) {
		global $user;
		$account_uid = $user->uid;
	}
	
	if (isset($activityEntry_id)) {
		$activityUpdates = entity_load('activity', array($activityEntry_id));
		$activityUpdate = reset($activityUpdates);
		//Get languauge code for activities
		$lang = field_language('activity',$activityUpdate);
		foreach ($lang as $key => $value) {
			${$key} = $value;
		}

		$activityUpdate->field_rw_claim_id[$field_rw_claim_id][0]['value'] = $reward_id;
		$activityUpdate->field_progress_info[$field_progress_info][0]['value'] = t('Congratulations! You have earned a prize!');
		field_attach_update('activity', $activityUpdate);
		unset($activityEntry_id);
	}

	$rewards = entity_load('reward', array($reward_id));
	$reward = reset($rewards);
	//Get language code forreward fields
	$lang = field_language('reward',$reward);
	foreach ($lang as $key => $value) {
		${$key} = $value;
	}

	$onscreenMsgId = $reward->field_raffle_reward_noti[$field_raffle_reward_noti][0]['value'];
	$onsRaffleMsgId = $reward->field_raffle_notification[$field_raffle_notification][0]['value'];
	$reward_mess_sub = $reward->field_raffle_reward_noti[$field_raffle_reward_noti][0]['value'];
	$reward_message_body = $reward->field_raffle_reward_noti[$field_raffle_reward_noti][0]['value'];
	$raffle_mess_sub = $reward->field_raffle_notification[$field_raffle_notification][0]['value'];
	$raffle_message_body = $reward->field_raffle_notification[$field_raffle_notification][0]['value']; 
	// Onscreen message for the reward claim.
	$rewardOnscMsg = messages_for_reward_claim($onscreenMsgId);
	// Onscreen message for the raffle claim.
	$raffleOnsMsg = messages_for_raffle_entry($onsRaffleMsgId);
	$raffle_pm_sub = pm_raffle_messages_sub_for_reward_claim($raffle_mess_sub);
	$raffle_pm_body = pm_raffle_messages_body_for_reward_claim($raffle_message_body);
	$reward_pm_sub = pm_reward_messages_sub_for_reward_claim($reward_mess_sub);
	$reward_pm_body = pm_reward_messages_body_for_reward_claim($reward_message_body); 


	//Entity insert in reward/raffle.
	if ($category == 'reward') {
		$title = t("@reward on @time", array('@reward' => $reward->title, '@time' => date('Y-m-d H:i')));
		$reward_claim = entity_create('reward', array('type' => 'reward_claim', 'title' => $title, 'uid' => $account_uid));
		$lang = field_language('reward',$reward_claim);
		foreach ($lang as $key => $value) {
			${$key} = $value;
		}
		$reward_claim->field_reward_claim_id[$field_reward_claim_id][0]['target_id'] = $reward_id;
		$reward_claim->field_filters_used[$field_filters_used][0]['value'] = $filters;
		$reward_claim->field_rf_drawing_name[$field_rf_drawing_name][0]['value'] = $rf_drawing;
		$reward_claim->field_raffle_claim[$field_raffle_claim][0]['value'] = $raffle_clm;
		$reward_claim->field_raffle_draw_timestamp[$field_raffle_draw_timestamp][0]['value'] = $draw_time;
		entity_save('reward', $reward_claim);
		drupal_set_message(t($rewardOnscMsg), 'status');
		_play_library_program_send_pm_message($account_uid, $reward_pm_sub, $reward_pm_body);
	} else if ($category == 'raffle_reward') {
		$title = t("@reward on @time", array('@reward' => $reward->title, '@time' => date('Y-m-d H:i')));
		$raffle_entry = entity_create('reward', array('type' => 'raffle_claim', 'title' => $title, 'uid' => $account_uid));
		$lang = field_language('reward',$raffle_entry);
		$raffle_entry->field_raffle_claim_id[$field_raffle_claim_id][0]['target_id'] = $reward_id;
		entity_save('reward', $raffle_entry);
		drupal_set_message(t($raffleOnsMsg),'status');
		_play_library_program_send_pm_message($account_uid, $raffle_pm_sub, $raffle_pm_body);
	}
}


//Function bulk reward claim
function pl_bulkreward_claim($reward_id, $account_uid, $category, $filters = NULL, $rf_drawing = NULL, $raffle_clm = NULL, $draw_time= NULL){

	global $activityEntry_id;

	if (empty($account_uid)) {
		global $user;
		$account_uid = $user->uid;
	}
	
	if (isset($activityEntry_id)) {
		$activityUpdates = entity_load('activity', array($activityEntry_id));
		$activityUpdate = reset($activityUpdates);
		//Get languauge code for activities
		$lang = field_language('activity',$activityUpdate);
		foreach ($lang as $key => $value) {
			${$key} = $value;
		}

		$activityUpdate->field_rw_claim_id[$field_rw_claim_id][0]['value'] = $reward_id;
		$activityUpdate->field_progress_info[$field_progress_info][0]['value'] = t('Congratulations! You have earned a prize!');
		field_attach_update('activity', $activityUpdate);
		unset($activityEntry_id);
	}

	$rewards = entity_load('reward', array($reward_id));
	$reward = reset($rewards);
	//Get language code forreward fields
	$lang = field_language('reward',$reward);
	foreach ($lang as $key => $value) {
		${$key} = $value;
	}

	$onscreenMsgId = $reward->field_raffle_reward_noti[$field_raffle_reward_noti][0]['value'];
	$onsRaffleMsgId = $reward->field_raffle_notification[$field_raffle_notification][0]['value'];
	$reward_mess_sub = $reward->field_raffle_reward_noti[$field_raffle_reward_noti][0]['value'];
	$reward_message_body = $reward->field_raffle_reward_noti[$field_raffle_reward_noti][0]['value'];
	$raffle_mess_sub = $reward->field_raffle_notification[$field_raffle_notification][0]['value'];
	$raffle_message_body = $reward->field_raffle_notification[$field_raffle_notification][0]['value']; 
	// Onscreen message for the reward claim.
	$rewardOnscMsg = messages_for_reward_claim($onscreenMsgId);
	// Onscreen message for the raffle claim.
	$raffleOnsMsg = messages_for_raffle_entry($onsRaffleMsgId);
	$raffle_pm_sub = pm_raffle_messages_sub_for_reward_claim($raffle_mess_sub);
	$raffle_pm_body = pm_raffle_messages_body_for_reward_claim($raffle_message_body);
	$reward_pm_sub = pm_reward_messages_sub_for_reward_claim($reward_mess_sub);
	$reward_pm_body = pm_reward_messages_body_for_reward_claim($reward_message_body); 


	//Entity insert in reward/raffle.
	if ($category == 'reward') {
		$title = t("@reward on @time", array('@reward' => $reward->title, '@time' => date('Y-m-d H:i')));
		$reward_claim = entity_create('reward', array('type' => 'reward_claim', 'title' => $title, 'uid' => $account_uid));
		$lang = field_language('reward',$reward_claim);
		foreach ($lang as $key => $value) {
			${$key} = $value;
		}
		$reward_claim->field_reward_claim_id[$field_reward_claim_id][0]['target_id'] = $reward_id;
		$reward_claim->field_filters_used[$field_filters_used][0]['value'] = $filters;
		$reward_claim->field_rf_drawing_name[$field_rf_drawing_name][0]['value'] = $rf_drawing;
		$reward_claim->field_raffle_claim[$field_raffle_claim][0]['value'] = $raffle_clm;
		$reward_claim->field_raffle_draw_timestamp[$field_raffle_draw_timestamp][0]['value'] = $draw_time;
		entity_save('reward', $reward_claim);
		drupal_set_message(t($rewardOnscMsg), 'status');
		_play_library_program_send_pm_message($account_uid, $reward_pm_sub, $reward_pm_body);
	} else if ($category == 'raffle_reward') {
		$title = t("@reward on @time", array('@reward' => $reward->title, '@time' => date('Y-m-d H:i')));
		$raffle_entry = entity_create('reward', array('type' => 'raffle_claim', 'title' => $title, 'uid' => $account_uid));
		$lang = field_language('reward',$raffle_entry);
		$raffle_entry->field_raffle_claim_id[$field_raffle_claim_id][0]['target_id'] = $reward_id;
		entity_save('reward', $raffle_entry);
		drupal_set_message(t($raffleOnsMsg),'status');
		_play_library_program_send_pm_message($account_uid, $raffle_pm_sub, $raffle_pm_body);
	}
}




/**
 * Reward Onscreen Message
 */
function messages_for_reward_claim($entity_id) {

  $query = db_select('field_data_field_onscreen_prize','ons')
  ->fields('ons', array('field_onscreen_prize_value'))
  ->condition('entity_id',$entity_id)
  ->execute()
  ->fetchAssoc();

  return $query['field_onscreen_prize_value'];
}

/**
 * Raffle pivate message subject.
 */
function pm_raffle_messages_sub_for_reward_claim($entity_id) {

  $query = db_select('field_data_field_mes_subject_reward','rfsub')
  ->fields('rfsub', array('field_mes_subject_reward_value'))
  ->condition('entity_id',$entity_id)
  ->execute()
  ->fetchAssoc();

  return $query['field_mes_subject_reward_value'];
}

/**
 * Raffle pivate message body.
 */
function pm_raffle_messages_body_for_reward_claim($entity_id) {

  $query = db_select('field_data_field_message_reward_winner','rfbody')
  ->fields('rfbody', array('field_message_reward_winner_value'))
  ->condition('entity_id',$entity_id)
  ->execute()
  ->fetchAssoc();

  return $query['field_message_reward_winner_value'];
}


/**
 * Reward pivate message subject.
 */
function pm_reward_messages_sub_for_reward_claim($entity_id) {

  $query = db_select('field_data_field_messa_subj_reward','rwsub')
  ->fields('rwsub', array('field_messa_subj_reward_value'))
  ->condition('entity_id',$entity_id)
  ->execute()
  ->fetchAssoc();

  return $query['field_messa_subj_reward_value'];
}

/**
 * Reward pivate message body.
 */
function pm_reward_messages_body_for_reward_claim($entity_id) {

  $query = db_select('field_data_field_message_prize_winner','rwbody')
  ->fields('rwbody', array('field_message_prize_winner_value'))
  ->condition('entity_id',$entity_id)
  ->execute()
  ->fetchAssoc();

  return $query['field_message_prize_winner_value'];
}



/**
 * Raffle Onscreen Message
 */
function messages_for_raffle_entry($entity_id) {

  $query = db_select('field_data_field_onscreen_reward','ons')
  ->fields('ons', array('field_onscreen_reward_value'))
  ->condition('entity_id',$entity_id)
  ->execute()
  ->fetchAssoc();

  return $query['field_onscreen_reward_value'];
}

/**
 * Condition for reward start date and end date;
 */
function pl_reward_time_limit($rew_sdate, $rew_edate) {

  $current_time = time();
  if($rew_sdate <= $current_time && $current_time <=  $rew_edate) {
    return TRUE;
  } else {
    return FALSE;
  }
}

/**
 * reward claim after passing through all validations
 */
function pl_check_reward_validation($reward_ids, $account_uid){

  return 'test';
}

/**
 * Implements hook_node_update().
 */
function play_library_program_node_update($node) {

  if ($node->status == NODE_PUBLISHED) {
    $current_node = node_load($node->nid);

    // check node type being updated
    if ($current_node->status !== $node->status) {
      if($node->type == 'review_book' || $node->type == 'review_activity' || $node->type == 'movie_review' || $node->type == 'music_review' || $node->type == 'video_game_review') {
        $hook = "node_update|node|{$node->type}|published";
        _play_library_program_invoke_activity_entry_hooks($node, 'node', $hook);
        $node->workbench_moderation['updating_live_revision'] = 1;
      } else {
        $hook = "node_update|node|{$node->type}|published";
        _play_library_program_invoke_activity_entry_hooks($node, 'node', $hook);
      }      
    }
  }
}

/**
 * Implements hook_webform_submission_insert().
 */
function play_library_program_webform_submission_insert($webform, $submission) {
  $hook = "webform_submit|{$webform->nid}";
  _play_library_program_invoke_activity_entry_hooks($submission, 'webform', $hook);
}

/**
 * Implements hook_theme().
 */
function play_library_program_theme($existing, $type, $theme, $path) {
  return array(
    'play_library_program_activities_block' => array(
      'variables' => array('pending' => NULL, 'completed' => NULL),
      'template' => 'play-library-program-activities-block',
    ),
  );
}

/**
**implements hook userpoints
**/

function play_library_program_userpoints($op, &$params = array()) {
  
  if ($op == 'points after') {
    //Call all reward calculations if reward category is not general
    if ($params['tid'] !=0 and $params['points'] >= 1 ) {
      $claimed_points = 0;
      //Get user current points
      $user_points = userpoints_get_current_points($params['uid'],$params['tid']);
      //$user_pre_points = $user_points - $params['points'];
      $term = taxonomy_term_load($params['tid']);
      $user_points_category_name = $term->name;
      $reward_id = explode('R_', $user_points_category_name);
      $rewards = entity_load('reward', array($reward_id[1]));
      $reward = reset($rewards);
      //get language codes for reward
      $lang = field_language('reward',$reward);
      foreach ($lang as $key => $value) {
      	${$key} = $value; 
      }
      $reward_category = $reward->field_category[$field_category][0]['value'];
      $repeatable = $reward->field_repeatable[$field_repeatable][0]['value'];
      //get repeat count if reward is set as repeatable
      if($repeatable == 1 ){
        $max_repeat = $reward->field_maximum_num_reward[$field_maximum_num_reward][0]['value'];
      } else{
        $max_repeat = 1;
      }
      $reward_points = $reward->field_points[$field_points][0]['value'];
      $receieved_rewards = pl_receieved_rewards($params['uid'], $reward_id[1]);
      $claimed_points = 0;
      //Claim rewards till user has enough points to get reward
      while($user_points >= $reward_points) {
        if($receieved_rewards < $max_repeat || empty($max_repeat)){
          pl_reward_claim($reward_id[1], $params['uid'], $reward_category);
          $receieved_rewards = $receieved_rewards + 1;
        }
        $user_points =  $user_points - $reward_points;
        $claimed_points = $claimed_points + $reward_points;
        // drupal_set_message('User Points:'. $user_points.'|| Claimed points: '. $claimed_points.' || Received Rewards: '.$receieved_rewards. ' || Max repeat:'. $max_repeat);
      }
      //deduct claimed points
      if($claimed_points > 0){
        $userpoint_rew = array(
        'uid' => $params['uid'],
        'points' => 0-$claimed_points,
        'tid' => $params['tid'],
        'display' => 0,
        'description' => t('Deduction for reward claim for reward id '). $reward_id[1]
        );
        userpoints_userpointsapi($userpoint_rew);
      }
    }
  }
}


/**
 * Implements hook_action_info().
 */
function play_library_program_action_info() {
    return array(
        'play_library_program_assign_reward_action' => array(
            'label' => t('Assign reward to each user'),
            'type' => 'user',
            'configurable' => TRUE,
            'vbo_configurable' => TRUE,
            'triggers' => array('any'),
        ),
        'play_library_program_assign_userpoints_action' => array(
            'label' => t('Assign userpoints to each user'),
            'type' => 'user',
            'configurable' => TRUE,
            'vbo_configurable' => TRUE,
            'triggers' => array('any'),
        ),
    );
}

function play_library_program_assign_reward_action_form($context, $form_state) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'reward');
    $query->entityCondition('bundle', array('physical_reward', 'print_reward', 'reward', 'sticker'));
    $results = $query->execute();
    $rewards = entity_load('reward', array_keys($results['reward']));
    $rewards_options = array();
    foreach ($rewards as $reward) {
        $rewards_options[$reward->id] = t('@reward_title (@reward_type)', array('@reward_title' => $reward->title, '@reward_type' => $reward->type));
    }

    $form['reward'] = array(
        '#title' => t('Reward'),
        '#type' => 'select',
        '#options' => $rewards_options,
        '#description' => t('Which reward are we going to assign to users?'),
        '#default_value' => isset($context['author']) ? $context['author'] : '',
        '#required' => TRUE,
    );
    return $form;
}

function play_library_program_assign_reward_action_submit($form, $form_state) {
    return array('reward' => $form_state['values']['reward']);
}

/**
 * Assign reward action via bulk operation.
 */
function play_library_program_assign_reward_action($account, $context) {
    $reward_id = $context['reward'];
    $account_uid = $account->uid;
    play_library_program_create_reward_claim($reward_id, $account);
}

function play_library_program_assign_userpoints_action_form($context, $form_state) {
    $points = array();
    for ($i = 1; $i <= 10; $i++) {
        $points[$i] = $i;
    }
    $form['points'] = array(
        '#title' => t('Points'),
        '#type' => 'select',
        '#options' => $points,
        '#description' => t('How many points should the user receive?'),
        '#default_value' => isset($context['points']) ? $context['points'] : 1,
        '#required' => TRUE,
    );
    return $form;
}

function play_library_program_assign_userpoints_action_submit($form, $form_state) {
    return array('points' => $form_state['values']['points']);
}

/**
 * Assign reward action via bulk operation.
 */
function play_library_program_assign_userpoints_action($account, $context) {
  $userpoints_txn = array(
    'uid' => $account->uid,
    'points' => $context['points'],
  );
  userpoints_userpointsapi($userpoints_txn);
}

/**
 * Creates an activity entry for non-actioned items.
 */
function play_library_program_complete_activity($activity_id, $type = 'nojs') {

  global $user;
  $activity_entry = play_library_program_create_activity_entry($activity_id, $user->uid);
  if ($type == 'nojs') {
    drupal_goto('');
  }
}

/**
 * Creates a new raffle winner.
 */
function play_library_program_create_raffle_winner($raffle_id, $uid) {
    global $user;
    $raffles = entity_load('raffle', array($raffle_id));
    $raffle = reset($raffles);
    $title = t("@raffle winner on @time", array('@raffle' => $raffle->title, '@time' => date('Y-m-d H:i')));
    $raffle_winner = entity_create('raffle', array('type' => 'raffle_winner', 'title' => $title, 'uid' => $uid));
    $raffle_winner->field_raffle_winner_raffle[LANGUAGE_NONE][0]['target_id'] = $raffle->id;
    $raffle_winner->field_raffle_winner[LANGUAGE_NONE][0]['target_id'] = $uid;
    entity_save('raffle', $raffle_winner);
    //drupal_goto('raffle/raffle/' . $raffle_id);
}

/**
 * Retrieves how many times an activity has been performed.
 */
function play_library_program_retrieve_activity_participation($activity_id, $account_id) {

  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'activity');
  $query->entityCondition('bundle', 'activity_entry');
  $query->propertyCondition('uid', $account_id);
  $query->fieldCondition('field_activity_entry_activity', 'target_id', $activity_id);
  return $query->count()->execute();
}

/**
 * Creates a new activity entry
 */
function play_library_program_create_activity_entry($activity_id, $account_id, $event_time = NULL, $sticker_tid) {
	//Load required activity to be recorded
	$activities = entity_load('activity', array($activity_id));
	$activity = reset($activities);
	//get language codes for activity fields
	$lang = field_language('activity',$activity);
	foreach ($lang as $key => $value) {
  		${$key} = $value;
  	}
  	if ($event_time == NULL){
  		$event_time = time();
  	}

	// Count for number of times activity has been performed.
	$count_activity_entry = play_library_program_retrieve_activity_participation($activity_id, $account_id);

  	// Activity limit
  	$no_of_time_user_perform_activity = $activity->field_activity_limit[$field_activity_limit][0]['value'];
  	//Set $no_of_time_user_perform_activity to 0 if empty
  	if (empty($no_of_time_user_perform_activity)){
  		$no_of_time_user_perform_activity = 0;
  	}
  	// Activity points
  	$activity_point = $activity->field_activity_points[$field_activity_points][0]['value'];

	// checking of activity frequency limit
	$activity_frequency_limit = play_library_program_frequency_limit($activity, $event_time, $account_id);

	// checking time range for activity to be performed
	$activity_time_limit = play_library_program_activity_time_limit($activity, $event_time);

	//Record activity only if user has not hit the maximumnumber of times he can perform the activity

	if($count_activity_entry < $no_of_time_user_perform_activity || $no_of_time_user_perform_activity == 0) {
		//Check frequency limits and time limits for activity 
  		if (($activity_frequency_limit == TRUE) && ($activity_time_limit == TRUE)) {
  			// title for activity entry in activity_entry bundle
    		$title = t("@activity on @time", array('@activity' => $activity->title, '@time' => date("Y-m-d H:i", $event_time)));
    		//if event time is set create activity for set event time 
    		if ($event_time){
    			$activity_entry = entity_create('activity', array('type' => 'activity_entry', 'title' => $title, 'uid' => $account_id, 'created' => $event_time, 'activity_points' => $activity_point));
    		}

			//get language code for newly created activity
			$lang = field_language('activity',  $activity_entry);
			foreach ($lang as $key => $value) {
				${$key} = $value;
	  		}

  			//Get all field values of activity entry to be updated
  			$activity_entry->field_activity_entry_activity[$field_activity_entry_activity][0]['target_id'] = $activity->id;
   			$activity_entry->field_activity_point[$field_activity_point][0]['value'] = $activity_point;
    		$activity_entry->field_calendar_sticker_id[$field_calendar_sticker_id][0]['tid'] = $sticker_tid;
    		//Save activity entry
    		entity_save('activity', $activity_entry);
    		$author = variable_get('pm_author');
    		$author_name = user_load_by_name($author);
    		$author_uid = $author_name->uid;
    		 
    		// Private message subject and body for every activity.
 			$message_subject = $activity->field_activity_message_subject[$field_activity_message_subject][0]['value'];
			$message_body = $activity->field_activity_message[$field_activity_message][0]['value'];
    		//Send Private message
    		_play_library_program_send_pm_message($account_id, $message_subject, $message_body);
  		}
  	}else {
		drupal_set_message(t('Thanks for your submission. However you will not receive any points as you have exceeded maximum number of submissions allowed for this activity'), 'warning');
	} 
}

/**
 * Creates a new reward claim
 */
function play_library_program_create_reward_claim($reward_id, $account_id, $raffle_reward_claim = 0) {
    global $user;
    $uid = $user->uid;

  // query to check if reward is associates with raffle
  $que = db_select('eck_reward', 'eck_r');
  $que->join('field_data_field_reward_raffle', 're_ra', 'eck_r.id = re_ra.entity_id');
  $que->join('eck_raffle', 'eck_rf', 'eck_rf.id = re_ra.field_reward_raffle_target_id');
  $que->condition('eck_r.id', $reward_id);
  $que->condition('eck_rf.type', 'raffle');
  $que->fields('eck_rf', array('type'));
  $res = $que->execute();
  $is_raffle_reward = $res->rowCount();
  
  // raffle entry will only happen if the current reward_id is linked to a raffle and 
  // we are not claimimg raffle reward 
  if($is_raffle_reward && !$raffle_reward_claim) {
      $que = db_select('eck_reward', 'eck_r');
      $que->join('field_data_field_reward_raffle', 're_ra', 'eck_r.id = re_ra.entity_id');
      $que->join('eck_raffle', 'eck_rf', 'eck_rf.id = re_ra.field_reward_raffle_target_id');
      $que->condition('eck_r.id', $reward_id, '=');
      $que->fields('eck_rf', array('id'));
      $re = $que->execute()->fetchField();
 
      play_library_program_create_raffle_entry($re, $account_id);
    } else {
        $rewards = entity_load('reward', array($reward_id));
        $reward = reset($rewards);
        $title = t("@reward on @time", array('@reward' => $reward->title, '@time' => date('Y-m-d H:i')));
        $reward_claim = entity_create('reward', array('type' => 'reward_claim', 'title' => $title, 'uid' => $account_id));
        $reward_claim->field_reward_claim_id[LANGUAGE_NONE][0]['target_id'] = $reward->id;
          entity_save('reward', $reward_claim);
    }

    $rew_id = $reward_claim->id;

    $query = db_select('eck_reward','rew');
    $query->join('field_data_field_reward_claim_id','claim_id','claim_id.entity_id = rew.id');
    $query->fields('rew',array('title','id','uid','type'));
    $query->fields('claim_id',array('field_reward_claim_id_target_id'));
    $query->condition('type','reward_claim');
    $query->condition('uid',$account_id,'=');
    $query->condition('id',$rew_id,'=');
    $result = $query->execute()
    ->fetchAll();

    foreach($result as $reward_msg){
      $res_title = $reward_msg->title;
      $res_id = $reward_msg->id;
      $res_uid = $reward_msg->uid;
      $res_type = $reward_msg->type;
      $res_entity_id = $reward_msg->field_reward_claim_id_target_id;

      $sub_query_msg = db_select('field_data_field_reward_message','msg');
      $sub_query_msg->join('field_data_field_reward_notification','noti','noti.entity_id = msg.entity_id');
      $sub_query_msg->fields('msg',array('field_reward_message_value'));
      $sub_query_msg->fields('noti',array('field_reward_notification_value'));
      $sub_query_msg->condition('msg.entity_id',$res_entity_id);
      $sub_query = $sub_query_msg->execute()->fetchAll();

      foreach($sub_query as $onscreen_msg){
        $msg_notifications = $onscreen_msg->field_reward_message_value;
        $mail_notifications = $onscreen_msg->field_reward_notification_value;
      }

      db_insert('reward_notification_patron')
       ->fields(array(
        'reward_name' => $res_title,
        'reward_id' => $res_id,
        'uid' => $res_uid,
        'type' => $res_type,
        'reward_notifications' => $msg_notifications,
        'reward_mail_notifications' => $mail_notifications,
        ))
       ->execute();
    }
}

/**
 * Creates a new raffle entry
 */
// function play_library_program_create_raffle_entry($raffle_id, $account_id) {

//   $user_uid = variable_get('follow_author');
//   $author_name = user_load_by_name($user_uid);
//   $author_uid = $author_name->uid;

//   $raffles = entity_load('raffle', array($raffle_id));
//   $raffle = reset($raffles);

//   $title = t("@raffle on @time", array('@raffle' => $raffle->title, '@time' => date('Y-m-d H:i')));
//   $raffle_entry = entity_create('raffle', array('type' => 'raffle_entry', 'title' => $title, 'uid' => $account_id));
//   $raffle_entry->field_raffle_entry_raffle[LANGUAGE_NONE][0]['target_id'] = $raffle->id;
//   entity_save('raffle', $raffle_entry);

//   $query = db_select('field_data_field_reward_message', 'fdfrm');
//   $query->join('field_data_field_reward_raffle', 'fdfrf', 'fdfrf.entity_id = fdfrm.entity_id');
//   $query->join('field_data_field_reward_notification', 'fdfrn', 'fdfrn.entity_id = fdfrf.entity_id');
//   $query->condition('field_reward_raffle_target_id', $raffle_id);
//   $query->fields('fdfrm', array('field_reward_message_value'));
//   $query->fields('fdfrn', array('field_reward_notification_value'));
//   $res = $query->execute()->fetchAll();
//   $message = $res[0]->field_reward_message_value;
//   $notification = $res[0]->field_reward_notification_value;
//   $notification_subject = "Congratulations! You've earned a raffle ticket.";

//   _play_library_program_send_pm_message($account_id, $notification_subject, $notification, $author_uid);
//   drupal_set_message($message);
// }

/**
 * Creates a new badge entry.
 */
function play_library_program_add_user_badge($badge_id, $account_id) {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'badge');
    $query->entityCondition('bundle', 'user_badge');
    $query->propertyCondition('uid', $account_id);
    $query->fieldCondition('field_user_badge_id', 'target_id', $badge_id);
    $count = $query->count()->execute();
    if (!empty($count)) {
        return;
    }

    $badges = entity_load('badge', array($badge_id));
    $badge = reset($badges);
    $title = t("@badge on @time", array('@badge' => $badge->title, '@time' => date('Y-m-d H:i')));
    $user_badge = entity_create('badge', array('type' => 'user_badge', 'title' => $title, 'uid' => $account_id));
    $user_badge->field_user_badge_id[LANGUAGE_NONE][0]['target_id'] = $badge->id;
    entity_save('raffle', $user_badge);
}

function _play_library_program_get_webforms() {
    $query = db_select('webform', 'w');
    $query->join('node', 'n', 'w.nid = n.nid');
    $query->fields('n');
    return $query->execute()->fetchAllAssoc('nid');
}

/**
 * Performs general firing hook check to create new activity entries
 */
function _play_library_program_invoke_activity_entry_hooks($entity, $type, $invoked_hook = '', $update_points = 0) {

  $entity_nid = $entity->nid;

  $query = db_select('node_revision','nr')
  ->fields('nr',array('vid'))
  ->condition('nid',$entity_nid)
  ->execute();

  $num_of_nodes = $query->rowCount();

  $hook = $invoked_hook;
  if (empty($hook)) {
    $hook = "entity_insert|{$type}|{$entity->type}";
  }

  if($num_of_nodes <= 2){
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'activity');
    $query->entityCondition('bundle', 'activity');
    $query->fieldCondition('field_activity_fired_hook', 'value', $hook);
    $result = $query->execute();

    foreach ($result as $entity_key => $entity_values) {
      if ($entity_key == 'activity') {
        foreach ($entity_values as $activity_entity) {
          $account = user_load($entity->uid);
          if(!$update_points) {
            play_library_program_create_activity_entry($activity_entity->id, $account->uid);
          } else {
            global $user;
            global $event_time;
            play_library_program_create_activity_entry($activity_entity->id, $user->uid, $event_time);
          }
        }
      }
    }
  }
}

/**
 * Function to return activity frequency
 */
function _get_activity_frequency($aid) {
  $query = db_select('field_data_field_activity_limit', 'fal');
  $query->fields('fal', array('field_activity_limit_value'));
  $query->condition('entity_id', $aid);
  $results = $query->execute();
  foreach ($results as $result) {
    return $result->field_activity_limit_value;
  }
}


function _get_term_from_name($term_name, $vocabulary_name) {
  if ($vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name)) {
    $tree = taxonomy_get_tree($vocabulary->vid);
    foreach ($tree as $term) {
      if ($term->name == $term_name) {
        return $term->tid;
      }
    }
  }

  return FALSE;
}

function pl_userpoints_per_reward($tax_reward, $account_id, $points_for_reward){

  $userpoint_rew = array(
    'uid' => $account_id,
    'points' => $points_for_reward,
    'tid' => $tax_reward,
  );
return userpoints_userpointsapi($userpoint_rew);
}


/**
 * Processes a reward claim.
 */
function _play_library_program_process_activity_entry($entity, $type) {

	//Get language codes
	$lang = field_language('activity', $entity);
	foreach ($lang as $key => $value) {
		${$key} = $value;
	}
  // get the activity id and other details form $entity (activity entry).
  $activity_id = $entity->field_activity_entry_activity[$field_activity_entry_activity][0]['target_id'];
  $points_from_activity = $entity->field_activity_point[$field_activity_point][0]['value'];
  $activity_frequency = _get_activity_frequency($activity_id);
    
  // get the number of times user has performed the current activity
  $current_participation_count = play_library_program_retrieve_activity_participation($activity_id, $entity->uid);
    
  // call userpoint API to update user points
  if ($points_from_activity > 0 && $current_participation_count <= $activity_frequency) {
        $userpoints_txn = array(
        'uid' => $entity->uid,
        'points' => $points_from_activity,
      );

      //Update user general points 
      userpoints_userpointsapi($userpoints_txn);
   
      //Add points for reward category
      _play_library_program_add_points_to_rewards($activity_id, $points_from_activity, $entity->uid);
  }
}



/**
*  Check all the condition for reward claim
*/
// function check_rewards_user_can_claim($account_id, $reward_ids, $activity_id) {

//   // array to hold all rid's user can claim
//   $rewards_user_can_claim = array();

//   if(count($reward_ids)) {

//     $uid = $account_id;
//     $user = user_load($uid);

//     if(array_key_exists(12, $user->roles)) {
//       $profile_name = 'group_lead';
//     }
//     else {
//       $profile_name = 'main';
//     }

//     $user_profile = profile2_load_by_user($account_id, $profile_name);

//     if(is_object($user_profile)) {
//     $dob = $user_profile->field_user_birthday[LANGUAGE_NONE][0]['value'];
//     $time_stamp_dob = strtotime($dob);
//     } else {
//       $time_stamp_dob = $_SESSION['user_birth_dt'];
//       unset($_SESSION['user_birth_dt']);
//     }

//     $current_time = time();
//     $user_age = floor(($current_time - $time_stamp_dob) / (60*60*24*365));


//     foreach ($reward_ids as $criteria_id => $rewards_id_ary) {
//       // get list of activities that are eligible for reward claim
//       $eligible_activities = get_eligible_activities($rewards_id_ary);

//       // exit current iteration if no activity found to work on.
//       if(!count($eligible_activities)) {
//         continue;
//       }

//       // get all activity entries for given set of eligible activities
//       $activity_entries_rs = get_activity_entries_for_eligible_activities($account_id, $eligible_activities);
//       $activity_entry_count = $activity_entries_rs->rowCount();

//       // variable to hold the points user can claim
//       $total_user_points_for_claim = 0;
    
//       if($activity_entry_count) {
//         $user_activity_entries = array();
//         while ($obj = $activity_entries_rs->fetchObject()) {
//           $claimed_points = $obj->field_claimed_point_value;
//           $activity_points = $obj->field_activity_point_value;
//           $user_activity_entries[$obj->entity_id] = array(
//             'claimed_points' => $claimed_points,
//             'acivity_points' => $activity_points,
//           );
//           $total_user_points_for_claim += ($activity_points - $claimed_points);
//         }
//       }

//       // fetch all reward criterias
//       $reward_criteria_load = entity_load('reward', array($criteria_id));
//       $reward_criteria_entity = reset($reward_criteria_load);
//       //Check repetable or not
//       $reward_criteria_repetable = $reward_criteria_entity->field_reward_criteria_repeatable[LANGUAGE_NONE][0]['value'];
//       $reward_criteria_limit = $reward_criteria_entity->field_max_points[LANGUAGE_NONE][0]['value'];
//       // points required to claim reward
//       $reward_criteri_point = $reward_criteria_entity->field_reward_criteria_point_mark[LANGUAGE_NONE][0]['value'];
        
//       // check if user has enough points to claim reward from current reward criteria
//       //If the reward criteria is not repeatable
//       if($reward_criteria_repetable == 0 ) {
//         if($total_user_points_for_claim / $reward_criteri_point == 1 && $total_user_points_for_claim % $reward_criteri_point == 0 ) {
//           $reward_criteria_start_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value'];
//           $reward_criteria_end_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value2'];
//           $reward_criteria_start_age = $reward_criteria_entity->field_start_age[LANGUAGE_NONE][0]['value'];
//           $reward_criteria_end_age = $reward_criteria_entity->field_end_age[LANGUAGE_NONE][0]['value'];
//           // validate reward for expiry and age limit
//           $reward_expired = chk_reward_expiry($reward_criteria_start_date, $reward_criteria_end_date);

//           if($reward_expired) {
//             continue;
//           } else {
//             $user_age_valid = chk_user_age_for_reward($user_age, $reward_criteria_start_age, $reward_criteria_end_age);
//             if(!$user_age_valid) {
//               continue;
//             }
//           }

//           // if all conditions meet, give all reward's to user
//           foreach($rewards_id_ary as $reward_id) {
//             $rewards_user_can_claim[] = $reward_id;
//           }
//         }
//       }
//        //If reward criteria is repetable
//       else {
//         if(isset($reward_criteria_limit)){
//           // check claim points is less than reward limit points
//           if($total_user_points_for_claim <= $reward_criteria_limit){
//             if($total_user_points_for_claim / $reward_criteri_point >= 1 && $total_user_points_for_claim % $reward_criteri_point == 0 ) {
//               $reward_criteria_start_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value'];
//               $reward_criteria_end_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value2'];
//               $reward_criteria_start_age = $reward_criteria_entity->field_start_age[LANGUAGE_NONE][0]['value'];
//               $reward_criteria_end_age = $reward_criteria_entity->field_end_age[LANGUAGE_NONE][0]['value'];
//               // validate reward for expiry and age limit
//               $reward_expired = chk_reward_expiry($reward_criteria_start_date, $reward_criteria_end_date);

//               if($reward_expired) {
//                 continue;
//               } else {
//                 $user_age_valid = chk_user_age_for_reward($user_age, $reward_criteria_start_age, $reward_criteria_end_age);
//                 if(!$user_age_valid) {
//                   continue;
//                 }
//               }

//               // if all conditions meet, give all reward's to user
//               foreach($rewards_id_ary as $reward_id) {
//                 $rewards_user_can_claim[] = $reward_id;
//               }
//             }
//           }         
//         }else{
//           if($total_user_points_for_claim / $reward_criteri_point >= 1 && $total_user_points_for_claim % $reward_criteri_point == 0 ) {
//             $reward_criteria_start_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value'];
//             $reward_criteria_end_date = $reward_criteria_entity->field_reward_criteria_date_limit[LANGUAGE_NONE][0]['value2'];
//             $reward_criteria_start_age = $reward_criteria_entity->field_start_age[LANGUAGE_NONE][0]['value'];
//             $reward_criteria_end_age = $reward_criteria_entity->field_end_age[LANGUAGE_NONE][0]['value'];
//             // validate reward for expiry and age limit
//             $reward_expired = chk_reward_expiry($reward_criteria_start_date, $reward_criteria_end_date);

//             if($reward_expired) {
//               continue;
//             } else {
//               $user_age_valid = chk_user_age_for_reward($user_age, $reward_criteria_start_age, $reward_criteria_end_age);
//               if(!$user_age_valid) {
//                 continue;
//               }
//             }

//             // if all conditions meet, give all reward's to user
//             foreach($rewards_id_ary as $reward_id) {
//               $rewards_user_can_claim[] = $reward_id;
//             }
//           }
//         }
//       }
//     }
//   }
//   return $rewards_user_can_claim;
// }

// /**
//  * Function to update activity entry claimed points.
//  *
//  * @param
//  *   $entity_id Number ID of the row to update
//  *   $claimed_points Number New claimed points
//  */
// function update_activity_entry_claimed_points($entity_id, $claimed_points) {
//   db_update('field_data_field_claimed_point')
//   ->fields(array('field_claimed_point_value' => $claimed_points))
//   ->condition ('entity_id', $entity_id)
//   ->execute();
// }

/**
 * Function to return all activities to associated to given rewards.
 *
 * @param Array $rewards_id_ary
 *   array of reward ID's
 *
 * @return Array $activities
 *  array of activity ID's linked with given rewards
 */
function get_eligible_activities($rewards_id_ary) {
  $activities = array();
  if(count($rewards_id_ary)) {
    $query = db_select('field_data_field_reward_criteria_activity', 'frca');
    $query->join('field_data_field_reward_criteria_reward', 'frcr', 'frca.entity_id = frcr.entity_id');
    $query->condition('frcr.field_reward_criteria_reward_target_id', $rewards_id_ary, 'IN');
    $query->fields('frca', array('field_reward_criteria_activity_target_id'));
    $result = $query->execute()->fetchAll();
    foreach ($result as $value) {
      $activities[] = $value->field_reward_criteria_activity_target_id;
    }
  }
  return $activities;
}

/**
 * Function to return activity entries for given set of activities
 *
 * @param Number $account_id
 *   user ID whose activity entries to be returned
 *
 * @param Array $eligible_activities
 *   array of activities for which activity entry is to be selected
 *
 * @return mysql resultset $res
 *   query resultset
 */
function get_activity_entries_for_eligible_activities($account_id, $eligible_activities) {
  // Query to fetch all activity entries related to set of activities that are
  // linked to the reward user can earn, based on current activity
  $que = db_select('eck_activity', 'eck_a');
  $que->join('field_data_field_activity_entry_activity', 'fdfae', 'fdfae.entity_id = eck_a.id');
  $que->join('field_data_field_claimed_point', 'fdcp', 'fdcp.entity_id = eck_a.id');
  $que->join('field_data_field_activity_point', 'fdfap', 'fdfap.entity_id = eck_a.id');
  $que->condition('eck_a.uid', $account_id);
  $que->condition('fdfae.field_activity_entry_activity_target_id', $eligible_activities, 'IN');
  $que->condition('fdcp.field_claimed_point_value', 'fdfap.field_activity_point_value', '<=');
  $que->fields('fdcp', array('field_claimed_point_value'));
  $que->fields('fdfap', array('field_activity_point_value'));
  $que->fields('fdfae', array('entity_id'));
  $res = $que->execute();
  return $res;
}



function chk_reward_expiry($criteria_start_date, $criteria_end_date) {
    $current_date = time();
    $start_date = strtotime($criteria_start_date);
    $end_date = strtotime($criteria_end_date);  
    if($current_date >= $start_date && $current_date <= $end_date) {
      return FALSE;
    } else {
      return TRUE;
    }
}

function chk_user_age_for_reward($user_age, $start_age, $end_age) {
	//If only start age is set reward can be given to all users higher than this age
	if (empty($start_age) && empty($end_age)){
		return TRUE;	
	}
	//If only start age is set 
	elseif (empty($start_age) && !empty($end_age) && $user_age <= $end_age){
		return TRUE;	
	}
	//If only end age is set 
	elseif (empty($end_age) && !empty($start_age) && $start_age <= $user_age){
		return TRUE;	
	}
	//If bott start and end ages are set
	elseif($user_age >= $start_age && $user_age <= $end_age) {
		return TRUE;
	} else {
		return FALSE;
	}
}

/**play_library_program_create_reward_claim
 * Function to add reward claimed by user after an activity for calendar state
 */
function play_library_program_update_user_calendar_state($rid) {
    $cal_id = $_SESSION['usr_calendar_id'];
    unset($_SESSION['usr_calendar_id']);
    db_update('calendar')
        ->fields(array('reward_id' => $rid))
        ->condition ('id', $cal_id)
        ->execute();
}

/**
 * Processes a reward claim.
 */
// function _play_library_program_process_user_reward_claim($entity, $type) {
//     $account_uid = $entity->uid;
//     if (is_object($account_uid)) {
//         $account_uid = $account_uid->uid;
//     }
//     $rewards = entity_load('reward', array($entity->field_reward_claim_id[LANGUAGE_NONE][0]['target_id']));
//     $reward = reset($rewards);
//     // if (!empty($reward->field_reward_raffle)) {
//     //      play_library_program_create_raffle_entry($reward->field_reward_raffle[LANGUAGE_NONE][0]['target_id'], $account_uid);
//     // }
//     if (!empty($reward->field_reward_badge)) {
//         play_library_program_add_user_badge($reward->field_reward_badge[LANGUAGE_NONE][0]['target_id'], $account_uid);
//     }
//     _play_library_program_set_message($reward, $account_uid);
// }

/**
 * Retrieves satisfied reward criteria based on global points.
 */
function _play_library_program_get_global_reward_ids($user_pre_points, $user_points, $account_uid) {
    global $user;
    if (empty($account_uid)) {
        $account = $user;
    }
    else {
        $account = user_load($account_uid);
    }

    // Create exclusion list of rewards which are tied to activities.
    $exclude_ids = array(-1);
    $date = "" . date('Y-m-d') . " 00:00:00";
    $query = db_select('field_data_field_reward_criteria_activity', 'fdfrca');
    $query->fields('fdfrca', array('entity_id'));
    $results = $query->execute();
    foreach ($results as $result) {
        $exclude_ids[] = $result->entity_id;
    }

    $rids = array();
    // Get the non-repeated rewards first.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'reward');
    $query->entityCondition('bundle', 'reward_criteria');
    $query->propertyCondition('id', $exclude_ids, 'NOT IN');
    $query->fieldCondition('field_reward_criteria_point_mark', 'value', $user_pre_points, '>');
    $query->fieldCondition('field_reward_criteria_point_mark', 'value', $user_points, '<=');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value', $date, '<=');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value2', $date, '>=');
    $query->fieldCondition('field_reward_criteria_repeatable', 'value', 0);
    $query->addTag('debug');
    $results = $query->execute();
    
    if (!empty($results['reward'])) {
        foreach($results['reward'] as $reward) {
            $reward_entities = entity_load('reward', array($reward->id));
            $reward_entity = reset($reward_entities);
            if (_play_library_program_reward_criteria_fulfilled($reward_entity, $account)) {
                foreach ($reward_entity->field_reward_criteria_reward[LANGUAGE_NONE] as $reward) {
                    $rids[] = $reward['target_id'];
                }
            }
        }
    }

    // Process the repeated ones next.
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'reward');
    $query->entityCondition('bundle', 'reward_criteria');
    $query->propertyCondition('id', $exclude_ids, 'NOT IN');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value', $date, '<=');
    $query->fieldCondition('field_reward_criteria_date_limit', 'value2', $date, '>=');
    $query->fieldCondition('field_reward_criteria_repeatable', 'value', 1);
    $results = $query->execute();
    if (!empty($results['reward'])) {
        foreach($results['reward'] as $reward) {
            $reward_entities = entity_load('reward', array($reward->id));
            $reward_entity = reset($reward_entities);
            $modulus = $reward_entity->field_reward_criteria_point_mark[LANGUAGE_NONE][0]['value'];
            for ($i = $user_points; $i > $user_pre_points; $i--) {
                if ($i % $modulus == 0) {
                    if (_play_library_program_reward_criteria_fulfilled($reward_entity, $account)) {
                        foreach ($reward_entity->field_reward_criteria_reward[LANGUAGE_NONE] as $reward) {
                            $rids[] = $reward['target_id'];
                        }
                    }
                }
            }
        }
    }

    return array_unique($rids);
}

// /**
//  * Function to return all rewards that are linked to an activity.
//  */
// function _play_library_program_get_activity_reward_ids($activity_id, $user_activity_completed, $account_uid = NULL) {

//   global $user;
//   if (empty($account_uid)) {
//     $account = $user;
//   } else {
//     $account = user_load($account_uid);
//   }

//   $date = "" . date('Y-m-d') . " 00:00:00";
//   $rids = array();

//   // Get the non-repeated rewards first.
//   $query = new EntityFieldQuery();
//   $query->entityCondition('entity_type', 'reward');
//   $query->entityCondition('bundle', 'reward');
//   $query->fieldCondition('field_activities_reward ', 'target_id', 24);
//   //$query->fieldCondition('field_reward_criteria_point_mark', 'value', $user_activity_completed);
//   $query->fieldCondition('field_dates_reward', 'value', $date, '<=');
//   $query->fieldCondition('field_dates_reward', 'value2', $date, '>=');
//   $query->fieldCondition('field_repeatable', 'value', 0);
//   $results = $query->execute();
    
//   if (!empty($results['reward'])) {
//     $rid = array();

//     foreach($results['reward'] as $reward) {
//       $reward_criteria_id = $reward->id;
//       $reward_entities = entity_load('reward', array($reward_criteria_id));
//       $reward_entity = reset($reward_entities);

//       // check if the user (role) performing activity can receive the reward
//       if (_play_library_program_reward_criteria_fulfilled($reward_entity, $account)) {
//         foreach ($reward_entity->field_activities_reward[LANGUAGE_NONE] as $reward) {
//           // add the reward id into the arary of rewards that can be claimed.
//           $rid[] = $reward['target_id'];
//         }
//       }
//       $rids[$reward_criteria_id] = array_unique($rid);
//       $rid = array();
//     }
//   }

//   // Process the repeated ones next.
//   $query = new EntityFieldQuery();
//   $query->entityCondition('entity_type', 'reward');
//   $query->entityCondition('bundle', 'reward_criteria');
//   $query->fieldCondition('field_reward_criteria_activity ', 'target_id', $activity_id);
//   $query->fieldCondition('field_reward_criteria_date_limit', 'value', $date, '<=');
//   $query->fieldCondition('field_reward_criteria_date_limit', 'value2', $date, '>=');
//   $query->fieldCondition('field_reward_criteria_repeatable', 'value', 1);
//   $results = $query->execute();

//   if (!empty($results['reward'])) {
//     $rid = array();
//     foreach($results['reward'] as $reward) {
//       $reward_criteria_id = $reward->id;
//       $reward_entities = entity_load('reward', array($reward_criteria_id));
//       $reward_entity = reset($reward_entities);
//       // check if the user (role) performing activity can receive the reward
//       if (_play_library_program_reward_criteria_fulfilled($reward_entity, $account)) {
//         foreach ($reward_entity->field_reward_criteria_reward[LANGUAGE_NONE] as $reward) {
//           // add the reward id into the arary of rewards that can be claimed.
//           $rid[] = $reward['target_id'];
//         }
//       }
            
//       if(array_key_exists($reward_criteria_id, $rids)) {
//         $existing_rids = $rids[$reward_criteria_id];
//         $rid = array_unique($rid);
//         $merged_ary = array_merge($existing_rids, $rid);
//         $rids[$reward_criteria_id] = $merged_ary;
//       } else {
//         $rids[$reward_criteria_id] = array_unique($rid);
//       }
//         $rid = array();
//     }
//   }

//   return $rids;
// }
/**
 * Creates a new message.
 */
// function _play_library_program_set_message($reward, $account_uid) {
    
//     // Only use this if we opt to switch back to using the MNC module. Would require debugging and further development.
//     $notification_message = FALSE;
//     if ($reward->type == 'physical_reward') {
//         $notification_message = 'Congratulations, you just won a reward: ' . $reward->title;
//     }
//     if (!empty($notification_message)) {
//         $message = message_create('user_notification_reward', array('uid' => $account_uid));

//         $wrapper = entity_metadata_wrapper('message', $message);
//         $wrapper->field_notification_message->set(array('value' => $notification_message, 'format' => filter_default_format()));
//         $wrapper->save();
//     }

//     $options['mnc_recipients'] = array(
//         array(
//             'user' => user_load(1),
//         ),
//         array(
//             'user' => $account_uid,
//         ),
//     );

//     message_notify_send_message($message, $options, 'mnc_email');
    

//     // Send a privatemsg
//     if (!module_exists('privatemsg')) {
//         return;
//     }
//     if (!empty($reward->field_reward_notification)) {
//         $options = array(
//             'author' => user_load(1),
//         );
//         $recipient = user_load($account_uid);
//         $subject = t('[OPL] Congratulations, you just won a prize!');
//         $body = $reward->field_reward_notification[LANGUAGE_NONE][0]['value'];
//         $result = privatemsg_new_thread(array($recipient), $subject, $body, $options);
//     }
// }

function _play_library_program_reward_criteria_fulfilled($reward_entity, $account_uid) {
	global $language;
	//Get language code for entity fields
	$lang = field_language('reward', $reward_entity);
	foreach ($lang as $key => $value) {
 		${$key} = $value;
	}

	//Get roles forreward in an array
	$rewardRoles = $reward_entity->field_roles_reward[$field_roles_reward];
	$arrSize = sizeof($rewardRoles);
	for ($i = 0; $i < $arrSize; $i++) {
		$rewRoles[] = $rewardRoles[$i]['value']; 
	}

	//Get roles of user in an array
	$user = user_load($account_uid);
	// Get user role from session if not available from user object
	if (sizeof($user->roles)==1){
		$userRoles =array_keys($_SESSION['program_user_role_id']);
		unset($_SESSION['program_user_role_id']);
	}
	else{
		$userRoles = array_keys($user->roles);
	}
	//Check if any array elements are identical
	$roles_arr = array_intersect($userRoles, $rewRoles);
	//set default to False
	$allowed = FALSE;
	//return true if user role is in reward user role list
	if (count($roles_arr)) {
		$allowed = TRUE;
	} else {
		$allowed = FALSE;
	}
	//Return
	return $allowed;
}


/**
 * Add points to reward category if user is eligible for the reward
 */

function _play_library_program_add_points_to_rewards($activity_id, $points_to_add ,$account_uid) {
	// Condition if $account_uid is null.
	if (empty($account_uid)) {
    	global $user;
    	$account_uid = $user->uid;
  	}
  	

  	// Array of reward ids associated with reward.
  	$rewards_associated = pl_get_activity_reward_ids($activity_id, $account_uid);

  	// Check conditions to give points for reward.
  	if (isset($rewards_associated)) {
    	$user = user_load($account_uid);
    	// Check user role.
    	$profile_name = 'main';
    	if(array_key_exists(12, $user->roles)) {
      		$profile_name = 'group_lead';
    	}
     	//Get user details for validation of reward points
    	$user_profile = profile2_load_by_user($account_uid, $profile_name);
    	
    	if (is_object($user_profile)) {
    		//Get language code for user
			$lang = field_language('profile2', $user_profile);
      		foreach ($lang as $key => $value) {
      			${$key} = $value;
      		}
      		//get user dob
      		$dob = $user_profile->field_user_birthday[$field_user_birthday][0]['value'];
      		$time_stamp_dob = strtotime($dob);
    	}
    	//Else get DOB from session variable, Specifically written for registration rewards 
    	else {
    		$time_stamp_dob = $_SESSION['user_birth_dt'];
			unset($_SESSION['user_birth_dt']);
    	}
    	
    	$current_time = time();
    	$user_age = floor(($current_time - $time_stamp_dob) / (60*60*24*365));
    
    	// Giving points for each reward associated with the activity.
    	foreach ($rewards_associated as $reward_id) {
      		$rewards = entity_load('reward',array($reward_id));
      		$reward = reset($rewards);
      		//Get language code for reward fields
      		$lang = field_language('reward', $reward);
      		foreach ($lang as $key => $value) {
      			${$key} = $value;
      		}
      
      		$rew_sdate = strtotime($reward->field_dates_reward[$field_dates_reward][0]['value']);
      		$rew_edate = strtotime($reward->field_dates_reward[$field_dates_reward][0]['value2']);
      		$reward_category = $reward->field_category[$field_category][0]['value'];
      		$reward_type = $reward->field_type_of_reward_raffle_priz[$field_type_of_reward_raffle_priz][0]['tid'];
      		$points = $reward->field_points[$field_points][0]['value'];
      		$repeatable = $reward->field_repeatable[$field_repeatable][0]['value'];
      		//get max repeat only if repeatable flag set
      		if ($repeatable == 1){
        		$max_repeat = '';
        		if (isset($reward->field_maximum_num_reward[$field_maximum_num_reward])){
          			$max_repeat = $reward->field_maximum_num_reward[$field_maximum_num_reward][0]['value'];
        		}
      		}else{
       			$max_repeat = 1;
      		}
      		$roles = _play_library_program_reward_criteria_fulfilled($reward, $account_uid);

      		if (isset($reward->field_age_group[$field_age_group])){
        		$age_from = $reward->field_age_group[$field_age_group][0]['from'];
			}
			
			if (isset($reward->field_age_group[$field_age_group])){
        		$age_to = $reward->field_age_group[$field_age_group][0]['to'];
      		}

      		if (isset($reward->field_status_reward[$field_status_reward])){
        		$status = $reward->field_status_reward[$field_status_reward][0]['value'];
      		}

     		$receieved_rewards = pl_receieved_rewards($account_uid, $reward_id);
      		$rew_age_limit = chk_user_age_for_reward($user_age, $age_from, $age_to);
      		$tax_reward = 'R_'.$reward_id;
      		$rew_date = pl_reward_time_limit($rew_sdate, $rew_edate);

      		//Give points only if all reward criterias are satisfied.
      		//Add only points that are required to win the reward maximum number of times else unnessary points will accumulate in user points
      		if($rew_date == TRUE && $roles == TRUE && $rew_age_limit == TRUE && $status == 'active'){
        		//Calculate points based on reward repeatable flag and receiver reward count
        		if (!empty($max_repeat) || $max_repeat > 0){
          			$max_points = ($max_repeat-$receieved_rewards) *  $points;
        		}else{
          			$max_points = $points_to_add;
        		}
        		//Add only points that are required for the reward
				if($points_to_add < $max_points){
					$reward_points_to_add = $points_to_add;
				} else{
          			$reward_points_to_add = $max_points;
        		}
      		}
      		//Update user points for reward category
      		if($reward_points_to_add > 0 ){
				$term = _get_term_from_name('R_'.$reward_id, 'userpoints');
				if(isset($term)){
					$userpoint_rew = array(
					'uid' => $account_uid,
					'points' => $reward_points_to_add,
					'tid' => $term,
					'display' => 0,
					);
					userpoints_userpointsapi($userpoint_rew);
        		}
      		}
      	} // foreach ends here.
    } // if conditions for giving rewards ends here.
}

//Fuction to send private message

function _play_library_program_send_pm_message($account_id, $notification_subject, $notification, $author_uid = NULL){

  if (empty($account_id)) {
      global $user;
      $account_id = $user->uid;
  }
  // echo "<pre>";
  //Get Author id set on config page if not set
  if($author_uid == NULL){
  	$author = variable_get('pm_author');
  	$author_name = user_load_by_name($author);
  	$author_uid = array('author'=>$author_name);
  	// print_r($author_uid);
  } else{
  	$author_uid = array('author'=>user_load($author_uid));
  }

  //Verify if all parameters are set for private message
  if (!empty($notification_subject) || !empty($notification) || !empty($author_uid)){
    privatemsg_new_thread(array(user_load($account_id)), $notification_subject, $notification, $author_uid);
    return TRUE;
  }
  else{
    watchdog('play_library_program','$notification_subject or $notification or $author_uid is not defined',   
    NULL, 
    $severity = WATCHDOG_NOTICE, 
    $link = NULL);
    return FALSE;
  }
}
